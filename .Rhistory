install.packages("bookdown")
install.packages("tinytex")
install.packages("xelatex")
tinytex::install_tinytex()
par(mar = c(4, 4, .1, .1))
plot(pressure, type = 'b', pch = 19)
par(mar = c(4, 4, .1, .1))
plot(pressure, type = 'b', pch = 19)
pressure
knitr::kable(
head(pressure, 10), caption = 'Here is a nice table!',
booktabs = TRUE
)
if (interactive()) {
ui <- fluidPage(
textInput("caption", "Caption", "Data Summary"),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$caption })
}
shinyApp(ui, server)
}
library(shiny)
if (interactive()) {
ui <- fluidPage(
textInput("caption", "Caption", "Data Summary"),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$caption })
}
shinyApp(ui, server)
}
# Example 1
library(shiny)
library(shiny.fluent)
ui <- function(id) {
ns <- NS(id)
div(
TextField.shinyInput(ns("text")),
textOutput(ns("textValue"))
)
}
server <- function(id) {
moduleServer(id, function(input, output, session) {
output$textValue <- renderText({
sprintf("Value: %s", input$text)
})
})
}
if (interactive()) {
shinyApp(ui("app"), function(input, output) server("app"))
}
# Example 1
library(shiny)
library(shiny.fluent)
ui <- function(id) {
ns <- NS(id)
div(
TextField.shinyInput(ns("text")),
textOutput(ns("textValue"))
)
}
server <- function(id) {
moduleServer(id, function(input, output, session) {
output$textValue <- renderText({
sprintf("Value: %s", input$text)
})
})
}
if (interactive()) {
shinyApp(ui("app"), function(input, output) server("app"))
}
remotes::install_github("deepanshu88/ShinyEditor")
library(shiny)
library(ShinyEditor)
# UI
ui <- fluidPage(
# Setup
use_editor("5r9izuhr95aviqhy0otthp1s92tuz2a9u8pew49xhr62932l"),
titlePanel("HTML Generator"),
# Text Input 1
fluidRow(
column(
width = 6,
editor('textcontent'),
br(),
actionButton(
"generatehtml",
"Generate HTML Code",
icon = icon("code"),
class = "btn-primary"
)),
column(
width = 6,
tags$pre(textOutput("rawText"))
)
)
)
# Server
server <- function(input, output, session) {
# Generate HTML
observeEvent(input$generatehtml, {
editorText(session, editorid = 'textcontent', outputid = 'mytext')
output$rawText <- renderText({
req(input$mytext)
enc2utf8(input$mytext)
})
})
}
# Run App
shinyApp(ui = ui, server = server)
library(shiny)
library(ShinyEditor)
# UI
ui <- fluidPage(
# Setup
use_editor("5r9izuhr95aviqhy0otthp1s92tuz2a9u8pew49xhr62932l"),
titlePanel("HTML Generator"),
# Text Input 1
fluidRow(
column(
width = 6,
editor('textcontent'),
br(),
actionButton(
"generatehtml",
"Generate HTML Code",
icon = icon("code"),
class = "btn-primary"
)),
column(
width = 6,
tags$pre(textOutput("rawText"))
)
)
)
# Server
server <- function(input, output, session) {
# Generate HTML
observeEvent(input$generatehtml, {
editorText(session, editorid = 'textcontent', outputid = 'mytext')
output$rawText <- renderText({
req(input$mytext)
enc2utf8(input$mytext)
})
})
}
# Run App
shinyApp(ui = ui, server = server)
library(shiny)
library(ShinyEditor)
# UI
ui <- fluidPage(
# Setup
use_editor("5r9izuhr95aviqhy0otthp1s92tuz2a9u8pew49xhr62932l"),
titlePanel("HTML Generator"),
# Text Input 1
fluidRow(
column(
width = 6,
editor('textcontent'),
br(),
actionButton(
"generatehtml",
"Generate HTML Code",
icon = icon("code"),
class = "btn-primary"
)),
column(
width = 6,
tags$pre(textOutput("rawText"))
)
)
)
# Server
server <- function(input, output, session) {
# Generate HTML
observeEvent(input$generatehtml, {
editorText(session, editorid = 'textcontent', outputid = 'mytext')
output$rawText <- renderText({
req(input$mytext)
enc2utf8(input$mytext)
})
})
}
# Run App
shinyApp(ui = ui, server = server)
library(shiny)
library(ShinyEditor)
# UI
ui <- fluidPage(
# Setup
use_editor("5r9izuhr95aviqhy0otthp1s92tuz2a9u8pew49xhr62932l"),
titlePanel("HTML Generator"),
# Text Input 1
fluidRow(
column(
width = 6,
editor('textcontent'),
br(),
actionButton(
"generatehtml",
"Generate HTML Code",
icon = icon("code"),
class = "btn-primary"
)),
column(
width = 6,
tags$pre(textOutput("rawText"))
)
)
)
# Server
server <- function(input, output, session) {
# Generate HTML
observeEvent(input$generatehtml, {
editorText(session, editorid = 'textcontent', outputid = 'mytext')
output$rawText <- renderText({
req(input$mytext)
enc2utf8(input$mytext)
})
})
}
# Run App
shinyApp(ui = ui, server = server)
library(shiny)
library(ShinyEditor)
# UI
ui <- fluidPage(
# Setup
use_editor("5r9izuhr95aviqhy0otthp1s92tuz2a9u8pew49xhr62932l"),
titlePanel("HTML Generator"),
# Text Input 1
fluidRow(
column(
width = 6,
editor('textcontent'),
br(),
actionButton(
"generatehtml",
"Generate HTML Code",
icon = icon("code"),
class = "btn-primary"
)),
column(
width = 6,
tags$pre(textOutput("rawText"))
)
)
)
# Server
server <- function(input, output, session) {
# Generate HTML
observeEvent(input$generatehtml, {
editorText(session, editorid = 'textcontent', outputid = 'mytext')
output$rawText <- renderText({
req(input$mytext)
enc2utf8(input$mytext)
})
})
}
# Run App
shinyApp(ui = ui, server = server)
# Load libraries
library(atable)
library(DT)
library(flextable)
library(officer)
library(rmarkdown)
library(shiny)
library(shinyglide)
library(shinyWidgets)
# Define UI
ui <- fluidPage(
# Add application title
titlePanel("Compare Treatment Groups in Clinical Trials"),
# Add glide functionality
glide(
height = "100%",
controls_position = "top",
screen(
# Contents of screen 1
h1("Upload Data"),
sidebarLayout(
sidebarPanel(
# Upload data
fileInput(
inputId = "raw_data",
label = "Upload .csv or .tsv",
accept = c(".csv", ".tsv")
)
),
mainPanel(
# Preview data
DTOutput("preview_data")
)
),
# Disable Next button until data is uploaded
next_condition = "output.preview_data !== undefined"
),
screen(
# Contents of screen 2
h1("Create Report"),
sidebarLayout(
sidebarPanel(
# Set word document title
textInput(
inputId = "document_title",
label = "Set Word Document Title",
value = "My Title"
),
# Select grouping variable
pickerInput(
inputId = "group_var",
label = "Select Group Variable",
choices = NULL,
multiple = FALSE
),
# Select the variables used to compare groups
pickerInput(
inputId = "comparison_vars",
label = "Select Variables to Compare",
choices = NULL,
multiple = TRUE
),
# Set word document filename
textInput(
inputId = "filename",
label = "Set Word Document Filename",
value = "my_comparison"
),
# Preview results
actionButton(
inputId = "preview_results",
label = "Preview Results"
),
# Download word document
downloadButton(
outputId = "download_word_document",
label = "Download Word Document"
)
),
mainPanel(
# Preview results
htmlOutput("result")
)
)
)
)
)
# Define server
server <- function(input, output, session) {
# Handle input data
data <- reactive({
req(input$raw_data)
ext <- tools::file_ext(input$raw_data$name)
switch(ext,
csv = readr::read_csv(input$raw_data$datapath),
tsv = readr::read_delim(input$raw_data$datapath, delim = "\t"),
validate("Invalid file. Please upload a .csv or .tsv file")
)
})
# Create DataTable that shows uploaded data
output$preview_data <- DT::renderDT({ data() |>
DT::datatable(
rownames = FALSE,
options = list(
searching = FALSE,
filter = FALSE
)
)
})
# Update input choices when data is uploaded
observeEvent(data(), {
var_names = colnames(data())
updatePickerInput(
session = session,
inputId = "group_var",
choices = var_names
)
updatePickerInput(
session = session,
inputId = "comparison_vars",
choices = var_names
)
})
# Create comparison table
word_table <- reactive({ atable::atable( x = data(), target_cols = input$comparison_vars, group_col = input$group_var, format_to = "word" ) |>
flextable::regulartable() |>
flextable::autofit()
})
# Create word document
word_document <- reactive({ read_docx() |>
body_add_par(value = input$document_title, style = "heading 1") |>
body_add_par(value = "", style = "Normal") |>
body_add_flextable(word_table())
})
# Create files to preview results
observeEvent(input$preview_results, {
# Save current file
word_document() |>
print(target = "preview_results.docx")
# Transform to html
pandoc_convert(
input = "preview_results.docx",
to = "html",
output = "preview_results.html"
)
})
# Preview result
#  Trigger only when the button is clicked
output$result <- renderUI({
req(input$preview_results)
includeHTML("preview_results.html")
})
# Download Handler
output$download_word_document <- shiny::downloadHandler( filename = function() { paste(input$filename, ".docx", sep = "") }, content = function(file) { word_document() |>
print(target = file)
}
)
}
# Run app
shinyApp(ui, server)
?officer
x = 3
# Print 1 to 5
while(x <= 5){
print(x)
x = x + 1
}
x <- letters[3:5]
for(i in x){
print(i)
}
x <- 5
# Check value is less than or greater than 10
if(x > 10){
print(paste(x, "is greater than 10"))
}else{
print(paste(x, "is less than 10"))
}
x <- 100
if(x > 10){
print(paste(x, "is greater than 10"))
}
?runif
areaOfCircle = function(radius){
area = pi*radius^2
return(area)
}
print(areaOfCircle(2))
Rectangle = function(length, width){
area = length * width
perimeter = 2 * (length + width)
# create an object called result which is a list of area and perimeter
result = list("Area" = area, "Perimeter" = perimeter)
return(result)
}
resultList = Rectangle(2, 3)
print(resultList["Area"])
print(resultList["Perimeter"])
print(resultList["Area"])
install.packages("ggplot2")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("ggplot2")
install.packages("plotly")
install.packages("caret")
install.packages("plotly")
library(plotly)
getwd()
children_anemia <- read.csv("./data/children_anemia.csv")
children_anemia <- read.csv("./data/children_anemia.csv")
library(rjson)
children_anemia
head(children_anemia)
sample <- rjson::fromJSON("./data/sample4.json")
sample <- rjson::fromJSON(file="./data/sample4.json")
sample
as.dataframe(sample)
as.data.frame(sample)
as.data.frame(sample[1])
children_anemia <- read.csv("./data/children_anemia.csv")
?unique()
?table
renv::snapshot()
renv::snapshot()
rsconnect::setAccountInfo(name='excelapps', token='68D8FC0BC64C81786D3B6439A0A7733A', secret='pFuHSscM3kJ5ea7vuP6D2eGETQqnjnpQQyy3245C')
install.packages(rsconnect)
install.packages("rsconnect")
rsconnect::setAccountInfo(name='excelapps', token='68D8FC0BC64C81786D3B6439A0A7733A', secret='pFuHSscM3kJ5ea7vuP6D2eGETQqnjnpQQyy3245C')
