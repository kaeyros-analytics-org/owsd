[{"path":"index.html","id":"welcome-adress","chapter":"1 Welcome adress","heading":"1 Welcome adress","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed eiusmod tempor incididunt ut labore et dolore magna aliqua. Interdum velit laoreet id donec. Tincidunt praesent semper feugiat nibh sed pulvinar proin gravida. Condimentum lacinia quis vel eros donec ac. Egestas erat imperdiet sed euismod nisi porta lorem. Montes nascetur ridiculus mus mauris vitae ultricies. Hendrerit dolor magna eget est lorem ipsum. Dictum fusce ut placerat orci nulla. Integer eget aliquet nibh praesent tristique magna sit amet purus. Aliquam purus sit amet luctus venenatis lectus magna fringilla. Pulvinar mattis nunc sed blandit libero volutpat sed cras. elementum eu facilisis sed odio morbi quis. egestas erat imperdiet sed euismod nisi porta lorem. Ac placerat vestibulum lectus mauris ultrices eros. Placerat egestas erat imperdiet. Curabitur gravida arcu ac tortor dignissim. Libero enim sed faucibus turpis eu mi bibendum. Vulputate dignissim suspendisse est ante nibh.quis risus sed vulputate odio ut enim blandit. Quis blandit turpis cursus hac habitasse platea. Et tortor consequat id porta nibh venenatis cras sed. Aliquet bibendum enim facilisis gravida. Proin nibh nisl condimentum id venenatis condimentum. Vivamus augue eget arcu dictum varius duis. Ut eu sem integer vitae justo eget magna. Tristique magna sit amet purus gravida quis blandit turpis cursus. Enim lobortis scelerisque fermentum dui faucibus ornare. Adipiscing enim eu turpis egestas pretium aenean.Diam arcu cursus euismod. Mauris augue neque gravida fermentum. Amet cursus sit amet dictum sit amet. Velit euismod pellentesque massa placerat duis ultricies. Natoque penatibus et magnis dis parturient montes nascetur ridiculus mus. Enim eu turpis egestas pretium. Vulputate enim nulla aliquet porttitor lacus luctus accumsan. Tortor id aliquet lectus proin nibh nisl. Ac felis donec et odio pellentesque diam volutpat commodo sed. Ut diam quam nulla porttitor massa id. Quam quisque id diam vel quam elementum pulvinar etiam. Fames ac turpis egestas maecenas pharetra. Vulputate odio ut enim blandit volutpat maecenas volutpat. Consequat mauris nunc congue nisi. Pellentesque adipiscing commodo elit . Tortor vitae purus faucibus ornare. Semper eget duis tellus urna. Ornare quam viverra orci sagittis eu volutpat odio. Elementum facilisis leo vel fringilla est ullamcorper eget nulla.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"introduction-to-r-and-rstudio","chapter":"2 Introduction to R and RStudio","heading":"2 Introduction to R and RStudio","text":"R widely used programming language data analysis data science. open-source free nature makes accessible everyone, active community offers invaluable support users.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"presentation","chapter":"2 Introduction to R and RStudio","heading":"2.1 Presentation","text":"R popular programming language free open source software data analysis science. particularly powerful performing complex statistical calculations creating attractive graphics. R offers around 20,000 packages compatible variety operating systems.RStudio integrated development environment (IDE) specifically designed work R programming language. makes working R easier enjoyable.RStudio’s key features numerous, just :User-friendly interface: RStudio intuitive interface code editor, console, environment panel plot panel. makes easy navigate visualise work.Code editing features: RStudio offers code editing features code completion, syntax highlighting debugging, allowing write R code faster easier.Package management: RStudio makes easy install manage many packages available R extend functionality specific tasks.Data visualization: RStudio makes easy create graphs visualizations data, helping explore trends communicate results.ability create projects organise share work colleagues effectively.History environment: RStudio keeps history orders variables, can keep track work easily re-use previous elements.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"when-was-r-created","chapter":"2 Introduction to R and RStudio","heading":"When was R created?","text":"R created early 1990s University Auckland statisticians Ross Ihaka Robert Gentleman.\nIhaka Gentleman, statistics professors New Zealand university, saw Ihaka called “common need better software environment” computer science laboratories. realization prompted pair begin developing R, implementation earlier S programming language.\nAlthough professors started working R early 90s, version 1.0.0 wasn’t officially released February 2000.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"why-the-name-r","chapter":"2 Introduction to R and RStudio","heading":"Why the name R ?","text":"R language takes name two sources: firstly, first letter name creators, secondly, play words name predecessor, S language, originally designed Bell Telephone Laboratories.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"strengths-of-r","chapter":"2 Introduction to R and RStudio","heading":"Strengths of R","text":"free software: advantage free encouraging reproducible research;free software: advantage free encouraging reproducible research;interpreted language: language closer language machine language, simpler direct , example, C C++;interpreted language: language closer language machine language, simpler direct , example, C C++;easier code sharing re-use thanks package system CRAN;easier code sharing re-use thanks package system CRAN;active community developers users:\nR evolves quickly, bugs quickly identified corrected;\nlot information programming R Internet;\nnumber R packages always growing, new features frequently added R.\nactive community developers users:R evolves quickly, bugs quickly identified corrected;lot information programming R Internet;number R packages always growing, new features frequently added R.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"weaknesses-of-r","chapter":"2 Introduction to R and RStudio","heading":"Weaknesses of r","text":"Performance Limitations: R typically slower compiled languages like C++ Java computationally intensive tasks involving large datasets. can bottleneck dealing complex models big data analysis.Basic security: R lacks basic security features, essential programming languages like Python. Consequently, limitations embedding R web applications.Complicated Language: R easy language learn steep learning curve. Individuals without prior programming experience may find challenging learn R.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"installation-of-r","chapter":"2 Introduction to R and RStudio","heading":"2.2 Installation of R","text":"install Windows, go http://cran.r-project.org/bin/windows/base/ follow first link download installer. installer launched, simply install R default options.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"installation-of-rstudio","chapter":"2 Introduction to R and RStudio","heading":"2.3 Installation of RStudio","text":"R correctly installed, go http://www.rstudio.com/products/rstudio/download/ download latest stable version RStudio. Specifically, Open Source edition RStudio Desktop (also server version).Choose installer operating system follow instructions installation program. want try latest RStudio features, can download development version (feature-rich stable version, may contain bugs) \nhttp://www.rstudio.com/products/rstudio/download/preview/.","code":""},{"path":"basics-of-the-r-language.html","id":"basics-of-the-r-language","chapter":"3 Basics of the R language","heading":"3 Basics of the R language","text":"","code":""},{"path":"basics-of-the-r-language.html","id":"variables","chapter":"3 Basics of the R language","heading":"3.1 Variables","text":"Variables identifier named space memory, stored can referenced manipulated later program.","code":""},{"path":"basics-of-the-r-language.html","id":"rule-variable-in-r","chapter":"3 Basics of the R language","heading":"Rule variable in R","text":"recommended use nouns name variable. Use underscores (e.g. donnees_menages) rather CamelCase (e.g. donneesMenages). prefer camelCase, use systematically throughout script standardise code.Notes:use T F name variables (abbreviations Booleans TRUE FALSE);use names already basic R functions(mean example). doesn’t always generate errors, prevent errors difficult detect!variable name must start letter can contain number,letter,underscore(’_‘) period(’.’).Special characters ‘#’, ‘&’, etc., along White space (tabs, space) allowed variable name.Underscore(’_’) beginning variable name allowed","code":""},{"path":"basics-of-the-r-language.html","id":"variable-assignment","chapter":"3 Basics of the R language","heading":"Variable assignment","text":"Variables R can assigned one three ways.Assignment Operator: = used assign value.following example contains 20 value stored variable ‘first.variable’ Example: first.variable = 20Assignment Operator: = used assign value.following example contains 20 value stored variable ‘first.variable’ Example: first.variable = 20<- Operator: following example contains New Program character gets assigned ‘second_variable’.\nExample: second_variable <- “New Program”<- Operator: following example contains New Program character gets assigned ‘second_variable’.\nExample: second_variable <- “New Program”-> Operator: following example contains 565 integer gets assigned ‘third.variable’.\nExample: 565 -> third.variable-> Operator: following example contains 565 integer gets assigned ‘third.variable’.\nExample: 565 -> third.variable","code":""},{"path":"basics-of-the-r-language.html","id":"types","chapter":"3 Basics of the R language","heading":"3.2 Types","text":"programming, data type important concept. Variables can store data different types, different types can different things.R, variables need declared particular type, can even change type set:several types variable R, common :integer: whole numbersnumeric: decimalscharacter: textlogical: booleans (TRUE FALSE)factor : categoriesIn addition variable types R, also data types, including:vectors: vector simply list items type.list:\nLists R objects contain elements different types like − numbers, strings, vectors another list inside . list can also contain matrix function elements. List created using list() function.matrix :\nmatrix two dimensional data structure variables typedataframe :\ndataframe two dimensional data structure variables differents types.","code":"\nval <- 3 #val is type of numeric\nval <- \"Hello\" #val is now a type of character\nclass(1L)\n#> [1] \"integer\"\nclass(1.0)\n#> [1] \"numeric\"\nclass(\"This is an R course\")\n#> [1] \"character\"\nclass(TRUE)\n#> [1] \"logical\"\nfactor.1 <- as.factor(c(\"green\",\"blue\",\"red\"))\nclass(factor.1)\n#> [1] \"factor\"\nvector_1 <- c(1,8)\nprint(vector_1)\n#> [1] 1 8\nvector_2 <- c(1,\"diamond\") #1 will become a character because all the elements \n                           #in the vector are supposed to have the same type\nprint(vector_2)\n#> [1] \"1\"       \"diamond\"\n# Create a list containing strings, numbers, vectors and a logical values.\nlist_data <- list(\"Red\", c(21,32,11), TRUE)\nprint(list_data)\n#> [[1]]\n#> [1] \"Red\"\n#> \n#> [[2]]\n#> [1] 21 32 11\n#> \n#> [[3]]\n#> [1] TRUE\nmatrix(1:9, nrow = 3, ncol = 3)\n#>      [,1] [,2] [,3]\n#> [1,]    1    4    7\n#> [2,]    2    5    8\n#> [3,]    3    6    9\ndata <- data.frame(id = c(1, 2), Age = c(21, 15), Name = c(\"John\", \"Dora\"))\nprint(data)\n#>   id Age Name\n#> 1  1  21 John\n#> 2  2  15 Dora"},{"path":"basics-of-the-r-language.html","id":"operators","chapter":"3 Basics of the R language","heading":"3.3 Operators","text":"Operators R can mainly classified following categories: arithmetic Operators,relational Operators, logical Operators,assignment OperatorsR arithmetics operators:      - addition (+)      - subtraction(-)      - multiplication (*)      - division (/)      - exponent (^)      - modulus (%%)      - integer division(%/%)Relational operators:      - less (<)      - greater (>)      - less equal (<=)      - greater equal (>=)      - equal (==)      - equal (!=)Logical operators:      - logical (!)      - Logical (&)      - Logical (|)Assignment operators:      - Leftwards assignment (<-,<<-)      - Rightwards assignment (->, ->>)","code":"\nprint(5+2)\n#> [1] 7\nprint(1-9)\n#> [1] -8\nprint(6*500)\n#> [1] 3000\nprint(5/2)\n#> [1] 2.5\nprint(2^3)\n#> [1] 8\nprint(9%%2)\n#> [1] 1\nprint(9%/%2)\n#> [1] 4\nprint(5<10)\n#> [1] TRUE\nprint(2>8)\n#> [1] FALSE\nprint(5<=5)\n#> [1] TRUE\nprint(5>=4)\n#> [1] TRUE\nx <- 7\nprint(x == 7)\n#> [1] TRUE\ny = 6\nprint(y!=4)\n#> [1] TRUE\nx <- c(TRUE, FALSE, 0, 6)\ny <- c(FALSE, TRUE, FALSE, TRUE)\n!x\n#> [1] FALSE  TRUE  TRUE FALSE\nx & y\n#> [1] FALSE FALSE FALSE  TRUE\nx | y\n#> [1]  TRUE  TRUE FALSE  TRUE\nx <- 5\nx <<- 6\n5 -> x\n6 ->>x"},{"path":"functions-and-packages.html","id":"functions-and-packages","chapter":"4 Functions and packages","heading":"4 Functions and packages","text":"embark R programming journey, understanding utilizing functions packages instrumental success. powerful tools empower tackle complex data analysis tasks, create insightful visualizations, develop innovative applications. Embrace world functions packages, unlock boundless possibilities R.","code":""},{"path":"functions-and-packages.html","id":"r-flow-control","chapter":"4 Functions and packages","heading":"4.1 R flow control","text":"run code, R executes statements order appear page, top bottom. Programming languages like R let change order code executes, allows skip certain statements run certain statements . Programming constructs let alter order code executes known control flow statements. R programming, many types control statements popular : condition, -else condition, loop, loop.condition: control structure checks expression provided parenthesis true . true, execution statements braces {} continues.\nSyntax:\n  (expression){\n    statements\n    ....\n  }condition: control structure checks expression provided parenthesis true . true, execution statements braces {} continues.\nSyntax:Example:-else condition:similar condition test expression condition fails, statements else condition executed.\nSyntax:\n  (expression) {\n    statements\n    ....\n  } else {\n    statements\n    ....\n  }-else condition:similar condition test expression condition fails, statements else condition executed.\nSyntax:Example:loop: type loop sequence statements executed repeatedly exit condition reached.\nSyntax:\n(value vector) {\nstatements\n….\n}\nExample:loop: loop another kind loop iterated condition satisfied. testing expression checked first executing body loop.\nSyntax:\n(expression) {\nstatement\n….\n}\nExample:","code":"  if(expression){\n    statements\n    ....\n  }\nx <- 100\n\nif(x > 10){ \n  print(paste(x, \"is greater than 10\"))\n}\n#> [1] \"100 is greater than 10\"  if (expression) {\n    statements\n    ....\n  } else {\n    statements\n    ....\n  }\nx <- 5\n\n# Check value is less than or greater than 10 \nif(x > 10){ \n  print(paste(x, \"is greater than 10\")) \n}else{ \n  print(paste(x, \"is less than 10\")) \n}\n#> [1] \"5 is less than 10\"\nx <- letters[3:5] \n\nfor(i in x){ \n  print(i) \n}\n#> [1] \"c\"\n#> [1] \"d\"\n#> [1] \"e\"\nx = 3\n\n# Print 1 to 5 \nwhile(x <= 5){ \n  print(x) \n  x = x + 1\n}\n#> [1] 3\n#> [1] 4\n#> [1] 5"},{"path":"functions-and-packages.html","id":"functions","chapter":"4 Functions and packages","heading":"4.2 Functions","text":"function set statements organized together perform specific task. useful want perform certain task multiple times.R function created using keyword function. basic syntax R function definition follows:Example1 : Single Input Single OutputExample 2: Multiple Input Multiple OutputExample 3: Inline FunctionExample 4: Function without Argument","code":"    function_name <- function(arg_1, arg_2,..) \n                        function body\n    }\n    \n# A simple R function to calculate \n# area of a circle\n \nareaOfCircle = function(radius){\n  area = pi*radius^2\n  return(area)\n}\n \nprint(areaOfCircle(2))\n#> [1] 12.56637\n\n# A simple R function to calculate area and perimeter of a rectangle\n \nRectangle = function(length, width){\n  area = length * width\n  perimeter = 2 * (length + width)\n   \n  # create an object called result which is a list of area and perimeter\n  result = list(\"Area\" = area, \"Perimeter\" = perimeter)\n  return(result)\n}\n \nresultList = Rectangle(2, 3)\nprint(resultList[\"Area\"])\n#> $Area\n#> [1] 6\nprint(resultList[\"Perimeter\"])\n#> $Perimeter\n#> [1] 10\n# A simple R program to demonstrate the inline function\n\nf = function(x) x^2*4+x/3\n\nprint(f(4))\n#> [1] 65.33333\nprint(f(-2))\n#> [1] 15.33333\nprint(0)\n#> [1] 0\n# Generate a random number between 0 and 1\ngenerate_random_number <- function() {\n  \n  random_number <- runif(1)\n  \n  return(random_number)\n}"},{"path":"functions-and-packages.html","id":"function-components","chapter":"4 Functions and packages","heading":"Function Components","text":"different parts function :Function Name: actual name function. stored R environment object name.Function Name: actual name function. stored R environment object name.Arguments: argument placeholder. function invoked, pass value argument. Arguments optional; , function may contain arguments. Also arguments can default values.Arguments: argument placeholder. function invoked, pass value argument. Arguments optional; , function may contain arguments. Also arguments can default values.Function Body: function body contains collection statements defines function .Function Body: function body contains collection statements defines function .Return Value: return value function last expression function body evaluated.Return Value: return value function last expression function body evaluated.R many -built functions can directly called program without defining first. can also create use functions referred user defined functions.","code":""},{"path":"functions-and-packages.html","id":"built-in-function","chapter":"4 Functions and packages","heading":"Built-in Function","text":"Built-Function functions already existing R language just need call use.several predefined functions, mathematical functions (abs(),sqrt(),exp(),…), statistical functions (mean(), median(), cor(),…), data manipulation functions (aggregate(),subset(),order(),…) file input/output functions (read.csv(),write.csv(),readRDS(),…).","code":""},{"path":"functions-and-packages.html","id":"packages","chapter":"4 Functions and packages","heading":"4.3 Packages","text":"Packages R Programming language set R functions, compiled code, sample data. stored directory called “library” within R environment. default, R installs group packages installation. start R console, default packages available default. packages already installed need loaded explicitly utilized R program ’s getting use .","code":""},{"path":"functions-and-packages.html","id":"repositories","chapter":"4 Functions and packages","heading":"Repositories","text":"repository place packages located stored can install R packages . Organizations Developers local repository, typically online accessible everyone. popular repositories R packages :CRAN: Comprehensive R Archive Network(CRAN) official repository, network FTP web servers maintained R community around world. R community coordinates , package published CRAN, Package needs pass several tests ensure package following CRAN policies.\n  install.packages(\"package_name\")CRAN: Comprehensive R Archive Network(CRAN) official repository, network FTP web servers maintained R community around world. R community coordinates , package published CRAN, Package needs pass several tests ensure package following CRAN policies.Bioconductor: Bioconductor topic-specific repository, intended open source software bioinformatics. Similar CRAN, submission review processes, community active several conferences meetings per year order maintain quality.\ndownload repository install fist BiocManager package run:\nBiocManager::install(\"package_name\")Bioconductor: Bioconductor topic-specific repository, intended open source software bioinformatics. Similar CRAN, submission review processes, community active several conferences meetings per year order maintain quality.\ndownload repository install fist BiocManager package run:Github: Github popular repository open-source projects. ’s popular comes unlimited space open source, integration git, version control software, ease share collaborate others.\ninstall R packages GitHub first, need install devtools running following code:\n  install.packages(\"devtools\")Github: Github popular repository open-source projects. ’s popular comes unlimited space open source, integration git, version control software, ease share collaborate others.\ninstall R packages GitHub first, need install devtools running following code:devtools installed, can use install_github() function install R package GitHub. syntax :can also install packages RStudio manually:\nR Studio go Tools -> Install Package, get pop-window type package want install:","code":"  install.packages(\"package_name\")BiocManager::install(\"package_name\")  install.packages(\"devtools\")    devtools::install_github(\"github_username/github_repo\")"},{"path":"functions-and-packages.html","id":"how-to-load-packages-in-r-programming-language","chapter":"4 Functions and packages","heading":"How to Load Packages in R Programming Language","text":"R package installed, ready use functionalities. just need sporadic use functions data inside package can access following notation.\ncan use library() require() load packages.load one package time:","code":"\nlibrary(stats)\nrequire(stats)\nlibrary(caret, ggplot2)\n#> Warning: le package 'caret' a été compilé avec la version R\n#> 4.3.3\n#> Le chargement a nécessité le package : ggplot2\n#> Le chargement a nécessité le package : lattice\nsource(\"./dependencies.R\")\n#> \n#> Attachement du package : 'dplyr'\n#> Les objets suivants sont masqués depuis 'package:stats':\n#> \n#>     filter, lag\n#> Les objets suivants sont masqués depuis 'package:base':\n#> \n#>     intersect, setdiff, setequal, union\n#> Warning: le package 'plotly' a été compilé avec la version\n#> R 4.3.3\n#> Le chargement a nécessité le package : ggplot2\n#> \n#> Attachement du package : 'plotly'\n#> L'objet suivant est masqué depuis 'package:ggplot2':\n#> \n#>     last_plot\n#> L'objet suivant est masqué depuis 'package:stats':\n#> \n#>     filter\n#> L'objet suivant est masqué depuis 'package:graphics':\n#> \n#>     layout"},{"path":"data-manipulation.html","id":"data-manipulation","chapter":"5 Data manipulation","heading":"5 Data manipulation","text":"Data manipulation involves modifying data make easier read organized. manipulate data analysis visualization. times, data collection process done machines involves lot errors inaccuracies reading. Data manipulation also used remove inaccuracies make data accurate precise.","code":""},{"path":"data-manipulation.html","id":"importation-of-data","chapter":"5 Data manipulation","heading":"5.1 Importation of data","text":"Data import essential step data analysis process. involves retrieving data various sources, local files, databases, APIs real-time feeds. step acquires data needed analysis decision-making, often starting point analytical work.part, learn load commonly used CSV, Excel, JSON, Database, XML/HTML data files R. Moreover, also look less commonly used file formats SPSS Stata.Importing data csv R:Importing data excel R:Importing data json R:Importing data database R:Importing data spss R:Importing data stata R:","code":"\n#load data\nchildren_anemia <- read.csv(\"./data/children_anemia.csv\")\n#load package\nlibrary(readxl)\n\n#load data\ndata_1 <- readxl::read_excel(\"./data/data_for_workshop1.xls\")\n#load package\nlibrary(jsonlite)\n\n#load data\ndata_json <- jsonlite::fromJSON(\"./data/sample4.json\")\n\n#transform data into dataframe\nas.data.frame(data_json)\n#load package\nlibrary(RSQLite)\n\n#establish the connection to the database\nconn <- dbConnect(RSQLite::SQLite(), \"./data/mental_health.sqlite\")\n\n#list names of all the tables in the database\ndbListTables(conn)\n#> [1] \"Answer\"   \"Question\" \"Survey\"\n#retrieve data from table Question\ndata_sqlite <- dbGetQuery(conn, \"SELECT * FROM Question\")\nhead(data_sqlite)\n#load package\nlibrary(haven)\n\n#load data\ndata_spss <- haven::read_sav(\"./data/mental_health.sav\")\n#load data\ndata_stata <- haven::read_dta(\"./data/SMOKE.DTA\")"},{"path":"data-manipulation.html","id":"basic-exploration-of-data","chapter":"5 Data manipulation","heading":"5.2 Basic exploration of data","text":"Data exploration helps explore think data ’re working. goal data exploration understand, visualize data can discover insights, relationships, patterns, anomalies.\nexplore data R many functions achieve .Function head(): used view first rows dataset.Function tail(): used view last rows dataset.Function str(): used provide structure data frame, showing data types.Function dim(): used know number rows columns.Function summary(): gives overview data, including minimum maximum values, quartiles, .Function table(): used build contingency table counts combination factor levels.Function unique(): unique() function R used eliminate delete duplicate values rows present vector, data frame, matrix well.Function hist(): function plot basic histogram view distribution variable.Function boxplot(): function plot boxplot, provides compact summary data’s central tendency, spread, potential outliers.","code":"\nhead(data_1)\ntail(data_1)\nstr(data_1)\ndim(data_1)\nsummary(data_1)\ntable(data_1$Sex)\n#> \n#> Female   Male \n#>     58     49\nunique(data_1$`Do you  have children?`)\n#> [1] \"NO\"  \"YES\"\nhist(data_1$`How many children do you have?`)\nboxplot(data_1$`How many children do you have?`)"},{"path":"data-manipulation.html","id":"data-manipulation-with-dplyr","chapter":"5 Data manipulation","heading":"5.3 Data manipulation with dplyr","text":"IMPORTANT POINT:\nOne useful ways use dplyr pipe operator. pipe operator looks like : %>% ,common practice use pipe operator “pipe” dplyr commands together. way chain multiple operations together concise precise way. %>% operator takes output expression left passes first argument function right.order manipulate clean data, R provides library called dplyr consists many built-methods manipulate data. use data manipulation function, first need import dplyr package using library(dplyr) line code. list fundamental data manipulation verbs use data manipulations.filter():\nfilter() function used produce subset data satisfies condition specified filter() method. condition, can use conditional operators, logical operators, NA values, range operators etc. filter data. Syntax filter() function given :\n  filter(dataframeName,condition)filter():filter() function used produce subset data satisfies condition specified filter() method. condition, can use conditional operators, logical operators, NA values, range operators etc. filter data. Syntax filter() function given :Example:distinct():\ndistinct() method removes duplicate rows data frame based specified columns. syntax distinct() method given :\n  distinct(dataframeName, col1, col2,.., .keep_all=TRUE)distinct():distinct() method removes duplicate rows data frame based specified columns. syntax distinct() method given :Example:arrange():\nR, arrange() method used order rows based specified column. syntax arrange() method specified :\n  arrange(dataframeName, columnName)arrange():R, arrange() method used order rows based specified column. syntax arrange() method specified :Example:select():\nselect() method used extract required columns table specifying required column names select() method. syntax select() method mentioned :\n  select(dataframeName, col1,col2,…)select():select() method used extract required columns table specifying required column names select() method. syntax select() method mentioned :Example:rename():\nrename() function used change column names. can done syntax:\n  rename(dataframeName, newName=oldName)rename():rename() function used change column names. can done syntax:Example:mutate():\nmutate() function creates new variables without dropping old ones. syntax mutate() specified :\n  mutate(dataframeName, newVariable=formula)mutate():mutate() function creates new variables without dropping old ones. syntax mutate() specified :Example:transmute():\ntransmute() function drops old variables creates new variables. syntax:\n  transmute(dataframeName, newVariable=formula)transmute():transmute() function drops old variables creates new variables. syntax:Example:summarize():\nUsing summarize method can summarize data data frame using aggregate functions like sum(), mean(), etc. Usually function used group_by() function. syntax summarize() method specified :\n  summarize(dataframeName, aggregate_function(columnName))summarize():Using summarize method can summarize data data frame using aggregate functions like sum(), mean(), etc. Usually function used group_by() function. syntax summarize() method specified :Example:","code":"  filter(dataframeName,condition)\ndplyr::filter(data_1, Sex==\"Female\")  distinct(dataframeName, col1, col2,.., .keep_all=TRUE)\ndata_1 %>% \n  dplyr::distinct()  arrange(dataframeName, columnName)\ndata_1 %>% \n  dplyr::arrange(Sex)  select(dataframeName, col1,col2,…)\ndata_1 %>% \n  dplyr::select(Sex,`Do you  have children?`)  rename(dataframeName, newName=oldName)\ndata_1 %>%\n  dplyr::rename(Status= `Are you married?`)  mutate(dataframeName, newVariable=formula)\ndata_1 %>%\n  dplyr::mutate(sex=ifelse(Sex==\"Female\", \"F\", \"M\"))  transmute(dataframeName, newVariable=formula)\ndata_1 %>%\n  dplyr::transmute(sex=ifelse(Sex==\"Female\", \"F\", \"M\"))  summarize(dataframeName, aggregate_function(columnName))\ndata_1 %>%\n  group_by(Sex) %>%\n  summarize(mean=mean(`How many children do you have?`), count=n())\n#> # A tibble: 2 × 3\n#>   Sex     mean count\n#>   <chr>  <dbl> <int>\n#> 1 Female  2.88    58\n#> 2 Male    1.76    49knitr::knit_child(\"04-data_manipulation.Rmd\")\n#> \n#> \n#> processing file: ./04-data_manipulation.Rmd\n#> \n  |                                     \n  |                               |   0%\n  |                                     \n  |.                              |   2% [unnamed-chunk-14]\n  |                                     \n  |.                              |   4%                   \n  |                                     \n  |..                             |   6% [unnamed-chunk-15]\n  |                                     \n  |...                            |   8%                   \n  |                                     \n  |...                            |  10% [unnamed-chunk-16]\n  |                                     \n  |....                           |  12%                   \n  |                                     \n  |.....                          |  15% [unnamed-chunk-17]\n  |                                     \n  |.....                          |  17%                   \n  |                                     \n  |......                         |  19% [unnamed-chunk-18]\n  |                                     \n  |......                         |  21% [unnamed-chunk-19]\n  |                                     \n  |.......                        |  23%                   \n  |                                     \n  |........                       |  25% [unnamed-chunk-20]\n  |                                     \n  |........                       |  27%                   \n  |                                     \n  |.........                      |  29% [unnamed-chunk-21]\n  |                                     \n  |..........                     |  31%                   \n  |                                     \n  |..........                     |  33% [unnamed-chunk-22]\n  |                                     \n  |...........                    |  35%                   \n  |                                     \n  |............                   |  38% [unnamed-chunk-23]\n  |                                     \n  |............                   |  40%                   \n  |                                     \n  |.............                  |  42% [unnamed-chunk-24]\n  |                                     \n  |..............                 |  44%                   \n  |                                     \n  |..............                 |  46% [unnamed-chunk-25]\n  |                                     \n  |...............                |  48%                   \n  |                                     \n  |................               |  50% [unnamed-chunk-26]\n  |                                     \n  |................               |  52%                   \n  |                                     \n  |.................              |  54% [unnamed-chunk-27]\n  |                                     \n  |.................              |  56%                   \n  |                                     \n  |..................             |  58% [unnamed-chunk-28]\n  |                                     \n  |...................            |  60%                   \n  |                                     \n  |...................            |  62% [unnamed-chunk-29]\n  |                                     \n  |....................           |  65%                   \n  |                                     \n  |.....................          |  67% [unnamed-chunk-30]\n  |                                     \n  |.....................          |  69%                   \n  |                                     \n  |......................         |  71% [unnamed-chunk-31]\n  |                                     \n  |.......................        |  73%                   \n  |                                     \n  |.......................        |  75% [unnamed-chunk-32]\n  |                                     \n  |........................       |  77%                   \n  |                                     \n  |.........................      |  79% [unnamed-chunk-33]\n  |                                     \n  |.........................      |  81%                   \n  |                                     \n  |..........................     |  83% [unnamed-chunk-34]\n  |                                     \n  |..........................     |  85%                   \n  |                                     \n  |...........................    |  88% [unnamed-chunk-35]\n  |                                     \n  |............................   |  90%                   \n  |                                     \n  |............................   |  92% [unnamed-chunk-36]\n  |                                     \n  |.............................  |  94%                   \n  |                                     \n  |.............................. |  96% [unnamed-chunk-37]\n  |                                     \n  |.............................. |  98%                   \n  |                                     \n  |...............................| 100% [unnamed-chunk-38]#> [1] \"\\n\\n```r\\nsource(\\\"./dependencies.R\\\")\\n#> \\n#> Attachement du package : 'dplyr'\\n#> Les objets suivants sont masqués depuis 'package:stats':\\n#> \\n#>     filter, lag\\n#> Les objets suivants sont masqués depuis 'package:base':\\n#> \\n#>     intersect, setdiff, setequal, union\\n#> Warning: le package 'plotly' a été compilé avec la version\\n#> R 4.3.3\\n#> Le chargement a nécessité le package : ggplot2\\n#> \\n#> Attachement du package : 'plotly'\\n#> L'objet suivant est masqué depuis 'package:ggplot2':\\n#> \\n#>     last_plot\\n#> L'objet suivant est masqué depuis 'package:stats':\\n#> \\n#>     filter\\n#> L'objet suivant est masqué depuis 'package:graphics':\\n#> \\n#>     layout\\n```\\n\\n# Data manipulation\\n\\nData manipulation involves modifying data to make it easier to read and to be more organized. We manipulate data for analysis and visualization. At times, the data collection process done by machines involves a lot of errors and inaccuracies in reading. Data manipulation is also used to remove these inaccuracies and make data more accurate and precise.\\n\\n## Importation of data\\nData import is an essential step in the data analysis process. It involves retrieving data from various sources, such as local files, databases, APIs or real-time feeds. This step acquires the data needed for analysis and decision-making, and is often the starting point for analytical work.\\n\\nIn this part, we will learn to load commonly used **CSV**, **Excel**, **JSON**, **Database**, and **XML/HTML** data files in R. Moreover, we will also look at less commonly used file formats such as **SPSS** and **Stata**. \\n\\nImporting data from csv to R:\\n\\n```r\\n#load data\\nchildren_anemia <- read.csv(\\\"./data/children_anemia.csv\\\")\\n```\\n\\nImporting data from excel to R:\\n\\n```r\\n#load package\\nlibrary(readxl)\\n\\n#load data\\ndata_1 <- readxl::read_excel(\\\"./data/data_for_workshop1.xls\\\")\\n```\\n\\n\\nImporting data from json to R:\\n\\n```r\\n#load package\\nlibrary(jsonlite)\\n\\n#load data\\ndata_json <- jsonlite::fromJSON(\\\"./data/sample4.json\\\")\\n\\n#transform data into dataframe\\nas.data.frame(data_json)\\n```\\n\\n\\nImporting data from database to R:\\n\\n```r\\n#load package\\nlibrary(RSQLite)\\n\\n#establish the connection to the database\\nconn <- dbConnect(RSQLite::SQLite(), \\\"./data/mental_health.sqlite\\\")\\n\\n#list names of all the tables in the database\\ndbListTables(conn)\\n#> [1] \\\"Answer\\\"   \\\"Question\\\" \\\"Survey\\\"\\n```\\n\\n```r\\n#retrieve data from table Question\\ndata_sqlite <- dbGetQuery(conn, \\\"SELECT * FROM Question\\\")\\nhead(data_sqlite)\\n```\\n\\n\\nImporting data from spss to R:\\n\\n```r\\n#load package\\nlibrary(haven)\\n\\n#load data\\ndata_spss <- haven::read_sav(\\\"./data/mental_health.sav\\\")\\n```\\n\\nImporting data from stata to R:\\n\\n```r\\n#load data\\ndata_stata <- haven::read_dta(\\\"./data/SMOKE.DTA\\\")\\n```\\n\\n\\n\\n## Basic exploration of data\\n\\nData exploration helps you explore and think about the data you're working. The goal with data exploration is to understand,  and visualize data so that you can discover insights, relationships, patterns, and anomalies.\\nTo explore data in R we have many functions to achieve that.\\n\\n+ Function head(): is used to view the first few rows of your dataset.\\n\\n```r\\nhead(data_1)\\n```\\n\\n\\n+ Function tail(): is used to view the last few rows of your dataset.\\n\\n```r\\ntail(data_1)\\n```\\n\\n\\n+ Function str(): is used to provide the structure of your data frame, showing you the data types.\\n\\n```r\\nstr(data_1)\\n```\\n\\n\\n+ Function dim(): is used to know about the number of rows and columns.\\n\\n```r\\ndim(data_1)\\n```\\n\\n\\n+ Function summary(): it gives you an overview of your data, including minimum and maximum values, quartiles, and more.\\n\\n```r\\nsummary(data_1)\\n```\\n\\n\\n+ Function table(): used to build a contingency table of the counts at each combination of factor levels.\\n\\n```r\\ntable(data_1$Sex)\\n#> \\n#> Female   Male \\n#>     58     49\\n```\\n\\n\\n+ Function unique(): The unique() function in R is used to eliminate or delete the duplicate values or the rows present in the vector, data frame, or matrix as well.\\n\\n```r\\nunique(data_1$`Do you  have children?`)\\n#> [1] \\\"NO\\\"  \\\"YES\\\"\\n```\\n\\n+ Function hist(): function to plot a basic histogram to view distribution of a variable.\\n\\n```r\\nhist(data_1$`How many children do you have?`)\\n```\\n\\n\\n<img src=\\\"05-data_cleaning_files/figure-html/unnamed-chunk-29-1.png\\\" width=\\\"672\\\" />\\n\\n\\n+ Function boxplot(): function to plot a boxplot, it provides a compact summary of the data's central tendency, spread, and potential outliers.\\n\\n```r\\nboxplot(data_1$`How many children do you have?`)\\n```\\n\\n\\n<img src=\\\"05-data_cleaning_files/figure-html/unnamed-chunk-30-1.png\\\" width=\\\"672\\\" />\\n\\n\\n## Data manipulation with dplyr\\n\\n**IMPORTANT POINT:**\\nOne of the more useful ways to use dplyr is with the pipe operator. The pipe operator looks like this: %>% ,and it is common practice to use the pipe operator to “pipe” dplyr commands together. It is a way to chain multiple operations together in a concise and precise way. The %>% operator takes the output of the expression on its left and passes it as the first argument to the function on its right.\\n\\nIn order to manipulate and clean the data, R provides a library called dplyr which consists of many built-in methods to manipulate the data. So to use the data manipulation function, first need to import the dplyr package using library(dplyr) line of code. Below is the list of fundamental data manipulation verbs that you will use to do most of your data manipulations.\\n\\n+ filter(): \\n\\n  The filter() function is used to produce the subset of the data that satisfies the condition specified in the filter() method. In the condition, we can use conditional operators, logical operators, NA values, range operators etc. to filter out data. Syntax of filter() function is given below:\\n\\n        filter(dataframeName,condition)\\n        \\nExample:\\n\\n```r\\ndplyr::filter(data_1, Sex==\\\"Female\\\")\\n```\\n\\n+ distinct(): \\n\\n  The distinct() method removes duplicate rows from data frame or based on the specified columns. The syntax of distinct() method is given below:\\n  \\n        distinct(dataframeName, col1, col2,.., .keep_all=TRUE)\\n        \\nExample:\\n\\n```r\\ndata_1 %>% \\n  dplyr::distinct()\\n```\\n\\n\\n+ arrange():\\n\\n  In R, the arrange() method is used to order the rows based on a specified column. The syntax of arrange() method is specified below:\\n  \\n        arrange(dataframeName, columnName)\\n        \\nExample:\\n\\n```r\\ndata_1 %>% \\n  dplyr::arrange(Sex)\\n```\\n\\n\\n+ select():\\n\\n  The select() method is used to extract the required columns as a table by specifying the required column names in select() method. The syntax of select() method is mentioned below:\\n        \\n        select(dataframeName, col1,col2,…)\\n        \\nExample:\\n\\n```r\\ndata_1 %>% \\n  dplyr::select(Sex,`Do you  have children?`)\\n```\\n\\n\\n+ rename():\\n\\n  The rename() function is used to change the column names. This can be done by the below syntax:\\n  \\n        rename(dataframeName, newName=oldName)\\n        \\nExample:\\n\\n```r\\ndata_1 %>%\\n  dplyr::rename(Status= `Are you married?`)\\n```\\n\\n\\n+ mutate():\\n\\n  The mutate() function creates new variables without dropping the old ones. The syntax of mutate() is specified below:\\n  \\n        mutate(dataframeName, newVariable=formula)\\n        \\nExample:\\n\\n```r\\ndata_1 %>%\\n  dplyr::mutate(sex=ifelse(Sex==\\\"Female\\\", \\\"F\\\", \\\"M\\\"))\\n```\\n\\n\\n+ transmute():\\n\\n  The transmute() function drops the old variables and creates new variables. Here is the syntax:\\n  \\n        transmute(dataframeName, newVariable=formula)\\n        \\nExample:\\n\\n```r\\ndata_1 %>%\\n  dplyr::transmute(sex=ifelse(Sex==\\\"Female\\\", \\\"F\\\", \\\"M\\\"))\\n```\\n\\n\\n+ summarize():\\n\\n  Using the summarize method we can summarize the data in the data frame by using aggregate functions like sum(), mean(), etc. Usually this function is used with the `group_by()` function. The syntax of summarize() method is specified below:\\n  \\n        summarize(dataframeName, aggregate_function(columnName))\\n        \\nExample:\\n\\n```r\\ndata_1 %>%\\n  group_by(Sex) %>%\\n  summarize(mean=mean(`How many children do you have?`), count=n())\\n#> # A tibble: 2 × 3\\n#>   Sex     mean count\\n#>   <chr>  <dbl> <int>\\n#> 1 Female  2.88    58\\n#> 2 Male    1.76    49\\n```\"\nsource(\"./dependencies.R\")"},{"path":"data-cleaning.html","id":"data-cleaning","chapter":"6 Data cleaning","heading":"6 Data cleaning","text":"domain data science, R reigns supreme tool transforming raw data actionable insights.\nData cleaning, core competency R, empowers us clean, filter, transform, aggregate data, paving way meaningful analysis. introductory paragraph delves world data manipulation data cleaning R, highlighting significance exploring key concepts involved.several methods used data cleansing, including:Renaming columsDuring data cleansing, column renaming plays crucial role organizing clarifying dataset. step involves assigning meaningful consistent names columns, facilitates interpretation subsequent use analysis.Handling Missing Data:Missing data, also known missing values, common challenge encountered data analysis. refers absence information specific variables certain observations within dataset. deal missing data two options: impute data remove data.      2.1) Imputationwe can use imputation mean, median mode.        - Imputation mean:        - Imputation median:        - Imputation mode:      2.2) Removing dataThere 2 usuals methods deleting data dealing missing data: listwise dropping variables.        - Listwise:method, data observation one missing values deleted. analysis run observations complete set data.        - Dropping variables:data missing large proportion observations, may best discard variable entirely insignificant.Handling outliers\nData points far dataset’s points considered outliers. presence outliers can pose significant problems statistical analysis machine learning. can bias model parameter estimates, lead erroneous conclusions affect algorithm performance.Removing duplicates:\nRemoving duplicates ensures data point represented , leading accurate consistent data analysis.Checking data structure:Checking data types crucial step data analysis ensures ’re working data way ’s intended order avoid errors later analysis.can change type data across many functions like: .numeric(), .character(), .factor() etc….data right type.Combine dataframesSuppose dataset combines data different sources, can combine differents datasets one. combining data multiple sources, ensure data fields align correctly.\n    - Combine column\n00    - combine row","code":"\ndata_1 %>%\n  rename(marital_status=`Are you married?`)\n#Create a new column of number of varieties\ndata_1$number_variety <- str_sub(data_1$`How many varieties do you grow on the same plot or in the same field?`, 1, 1)\n\n#verify the type of the column\nstr(data_1$number_variety)\n\n#transform the type into number\ndata_1$number_variety <- as.integer(data_1$number_variety)\n\n#impute NA values by mean\ndata_1$number_variety[is.na(data_1$number_variety)]<-round(mean(data_1$number_variety, na.rm = TRUE))\n#function to extract the number of kg in the column\ndata_1$`What is the production in kg or ton/year?` <- sapply(data_1$`What is the production in kg or ton/year?`, function(x) {\n    # Extract digits using regular expression and convert to numeric\n    str_extract(x, \"\\\\d+\") %>% as.numeric()\n})\n\n#impute the column by median\ndata_1$`What is the production in kg or ton/year?`[is.na(data_1$`What is the production in kg or ton/year?`)]<-median(data_1$`What is the production in kg or ton/year?`, na.rm = TRUE)\ndata_1$`Where do you get your seeds?`[is.na(data_1$`Where do you get your seeds?`)] <- names(which.max(table(data_1$`Where do you get your seeds?`)))\n#remove all rows who does'nt have a tasba farm\ndata_listwise <- data_1\nna.omit(data_listwise)\nsubset( data_1, select = -c(`How do you call these varieties you have?`))\n# data_1 <- data_1$`How many children do you have?`[!data_1$`How many children do you have?` %in% boxplot.stats(data_1$`How many children do you have?`)$out]\ndata_1 <- data_1 %>% \n  distinct()\nstr(data_1)\nculture1 <- data.frame(\n  Culture = c(\"wheat\", \"maize\", \"rice\"),\n  Area = c(100, 150, 120)\n)\n\nculture2 <- data.frame(\n  Culture = c(\"wheat\", \"maize\", \"rice\"),\n  Return = c(50, 60, 45)\n)\n\nculture_final1 <- cbind(culture1, culture2)\nculture3 <- data.frame(\n  Culture = c(\"wheat\", \"maize\", \"rice\"),\n  Area = c(100, 150, 120)\n)\n\nculture4 <- data.frame(\n  Culture = c(\"potato\", \"cassava\"),\n  Area = c(250, 400)\n)\n\nculture_final2 <- rbind(culture3, culture4)\n\n# 7) Data inconsistencies:\n# \n# When faced with a data set, we are often confronted with data inconsistencies. This can take the form of spelling errors, language heterogeneity in the dataset, etc.\n# \n# &nbsp;&nbsp;&nbsp;&nbsp;Handling spelling errors\n\n#&nbsp;&nbsp;&nbsp;&nbsp; Handling language heterogeneityknitr::knit_child(\"05-data_cleaning.Rmd\")\n#> \n#> \n#> processing file: ./05-data_cleaning.Rmd\n#> \n  |                                     \n  |                               |   0%\n  |                                     \n  |.                              |   4% [unnamed-chunk-13]\n  |                                     \n  |..                             |   8%                   \n  |                                     \n  |....                           |  12% [unnamed-chunk-14]\n  |                                     \n  |.....                          |  15%                   \n  |                                     \n  |......                         |  19% [unnamed-chunk-15]\n  |                                     \n  |.......                        |  23%                   \n  |                                     \n  |........                       |  27% [unnamed-chunk-16]\n  |                                     \n  |..........                     |  31%                   \n  |                                     \n  |...........                    |  35% [unnamed-chunk-17]\n  |                                     \n  |............                   |  38%                   \n  |                                     \n  |.............                  |  42% [unnamed-chunk-18]\n  |                                     \n  |..............                 |  46%                   \n  |                                     \n  |................               |  50% [unnamed-chunk-19]\n  |                                     \n  |.................              |  54%                   \n  |                                     \n  |..................             |  58% [unnamed-chunk-20]\n  |                                     \n  |...................            |  62%                   \n  |                                     \n  |....................           |  65% [unnamed-chunk-21]\n  |                                     \n  |.....................          |  69%                   \n  |                                     \n  |.......................        |  73% [unnamed-chunk-22]\n  |                                     \n  |........................       |  77%                   \n  |                                     \n  |.........................      |  81% [unnamed-chunk-23]\n  |                                     \n  |..........................     |  85%                   \n  |                                     \n  |...........................    |  88% [unnamed-chunk-24]\n  |                                     \n  |.............................  |  92%                   \n  |                                     \n  |.............................. |  96% [unnamed-chunk-25]\n  |                                     \n  |...............................| 100%                   #> [1] \"\\n\\n```r\\nknitr::knit_child(\\\"04-data_manipulation.Rmd\\\")\\n#> \\n#> \\n#> processing file: ./04-data_manipulation.Rmd\\n#> \\r  |                                     \\r  |                               |   0%\\r  |                                     \\r  |.                              |   2% [unnamed-chunk-26]\\r  |                                     \\r  |.                              |   4%                   \\r  |                                     \\r  |..                             |   6% [unnamed-chunk-27]\\r  |                                     \\r  |...                            |   8%                   \\r  |                                     \\r  |...                            |  10% [unnamed-chunk-28]\\r  |                                     \\r  |....                           |  12%                   \\r  |                                     \\r  |.....                          |  15% [unnamed-chunk-29]\\r  |                                     \\r  |.....                          |  17%                   \\r  |                                     \\r  |......                         |  19% [unnamed-chunk-30]\\r  |                                     \\r  |......                         |  21% [unnamed-chunk-31]\\r  |                                     \\r  |.......                        |  23%                   \\r  |                                     \\r  |........                       |  25% [unnamed-chunk-32]\\r  |                                     \\r  |........                       |  27%                   \\r  |                                     \\r  |.........                      |  29% [unnamed-chunk-33]\\r  |                                     \\r  |..........                     |  31%                   \\r  |                                     \\r  |..........                     |  33% [unnamed-chunk-34]\\r  |                                     \\r  |...........                    |  35%                   \\r  |                                     \\r  |............                   |  38% [unnamed-chunk-35]\\r  |                                     \\r  |............                   |  40%                   \\r  |                                     \\r  |.............                  |  42% [unnamed-chunk-36]\\r  |                                     \\r  |..............                 |  44%                   \\r  |                                     \\r  |..............                 |  46% [unnamed-chunk-37]\\r  |                                     \\r  |...............                |  48%                   \\r  |                                     \\r  |................               |  50% [unnamed-chunk-38]\\r  |                                     \\r  |................               |  52%                   \\r  |                                     \\r  |.................              |  54% [unnamed-chunk-39]\\r  |                                     \\r  |.................              |  56%                   \\r  |                                     \\r  |..................             |  58% [unnamed-chunk-40]\\r  |                                     \\r  |...................            |  60%                   \\r  |                                     \\r  |...................            |  62% [unnamed-chunk-41]\\r  |                                     \\r  |....................           |  65%                   \\r  |                                     \\r  |.....................          |  67% [unnamed-chunk-42]\\r  |                                     \\r  |.....................          |  69%                   \\r  |                                     \\r  |......................         |  71% [unnamed-chunk-43]\\r  |                                     \\r  |.......................        |  73%                   \\r  |                                     \\r  |.......................        |  75% [unnamed-chunk-44]\\r  |                                     \\r  |........................       |  77%                   \\r  |                                     \\r  |.........................      |  79% [unnamed-chunk-45]\\r  |                                     \\r  |.........................      |  81%                   \\r  |                                     \\r  |..........................     |  83% [unnamed-chunk-46]\\r  |                                     \\r  |..........................     |  85%                   \\r  |                                     \\r  |...........................    |  88% [unnamed-chunk-47]\\r  |                                     \\r  |............................   |  90%                   \\r  |                                     \\r  |............................   |  92% [unnamed-chunk-48]\\r  |                                     \\r  |.............................  |  94%                   \\r  |                                     \\r  |.............................. |  96% [unnamed-chunk-49]\\r  |                                     \\r  |.............................. |  98%                   \\r  |                                     \\r  |...............................| 100% [unnamed-chunk-50]\\r\\n```\\n\\n````\\n#> [1] \\\"\\\\n\\\\n```r\\\\nsource(\\\\\\\"./dependencies.R\\\\\\\")\\\\n#> \\\\n#> Attachement du package : 'dplyr'\\\\n#> Les objets suivants sont masqués depuis 'package:stats':\\\\n#> \\\\n#>     filter, lag\\\\n#> Les objets suivants sont masqués depuis 'package:base':\\\\n#> \\\\n#>     intersect, setdiff, setequal, union\\\\n#> Warning: le package 'plotly' a été compilé avec la version\\\\n#> R 4.3.3\\\\n#> Le chargement a nécessité le package : ggplot2\\\\n#> \\\\n#> Attachement du package : 'plotly'\\\\n#> L'objet suivant est masqué depuis 'package:ggplot2':\\\\n#> \\\\n#>     last_plot\\\\n#> L'objet suivant est masqué depuis 'package:stats':\\\\n#> \\\\n#>     filter\\\\n#> L'objet suivant est masqué depuis 'package:graphics':\\\\n#> \\\\n#>     layout\\\\n```\\\\n\\\\n# Data manipulation\\\\n\\\\nData manipulation involves modifying data to make it easier to read and to be more organized. We manipulate data for analysis and visualization. At times, the data collection process done by machines involves a lot of errors and inaccuracies in reading. Data manipulation is also used to remove these inaccuracies and make data more accurate and precise.\\\\n\\\\n## Importation of data\\\\nData import is an essential step in the data analysis process. It involves retrieving data from various sources, such as local files, databases, APIs or real-time feeds. This step acquires the data needed for analysis and decision-making, and is often the starting point for analytical work.\\\\n\\\\nIn this part, we will learn to load commonly used **CSV**, **Excel**, **JSON**, **Database**, and **XML/HTML** data files in R. Moreover, we will also look at less commonly used file formats such as **SPSS** and **Stata**. \\\\n\\\\nImporting data from csv to R:\\\\n\\\\n```r\\\\n#load data\\\\nchildren_anemia <- read.csv(\\\\\\\"./data/children_anemia.csv\\\\\\\")\\\\n```\\\\n\\\\nImporting data from excel to R:\\\\n\\\\n```r\\\\n#load package\\\\nlibrary(readxl)\\\\n\\\\n#load data\\\\ndata_1 <- readxl::read_excel(\\\\\\\"./data/data_for_workshop1.xls\\\\\\\")\\\\n```\\\\n\\\\n\\\\nImporting data from json to R:\\\\n\\\\n```r\\\\n#load package\\\\nlibrary(jsonlite)\\\\n\\\\n#load data\\\\ndata_json <- jsonlite::fromJSON(\\\\\\\"./data/sample4.json\\\\\\\")\\\\n\\\\n#transform data into dataframe\\\\nas.data.frame(data_json)\\\\n```\\\\n\\\\n\\\\nImporting data from database to R:\\\\n\\\\n```r\\\\n#load package\\\\nlibrary(RSQLite)\\\\n\\\\n#establish the connection to the database\\\\nconn <- dbConnect(RSQLite::SQLite(), \\\\\\\"./data/mental_health.sqlite\\\\\\\")\\\\n\\\\n#list names of all the tables in the database\\\\ndbListTables(conn)\\\\n#> [1] \\\\\\\"Answer\\\\\\\"   \\\\\\\"Question\\\\\\\" \\\\\\\"Survey\\\\\\\"\\\\n```\\\\n\\\\n```r\\\\n#retrieve data from table Question\\\\ndata_sqlite <- dbGetQuery(conn, \\\\\\\"SELECT * FROM Question\\\\\\\")\\\\nhead(data_sqlite)\\\\n```\\\\n\\\\n\\\\nImporting data from spss to R:\\\\n\\\\n```r\\\\n#load package\\\\nlibrary(haven)\\\\n\\\\n#load data\\\\ndata_spss <- haven::read_sav(\\\\\\\"./data/mental_health.sav\\\\\\\")\\\\n```\\\\n\\\\nImporting data from stata to R:\\\\n\\\\n```r\\\\n#load data\\\\ndata_stata <- haven::read_dta(\\\\\\\"./data/SMOKE.DTA\\\\\\\")\\\\n```\\\\n\\\\n\\\\n\\\\n## Basic exploration of data\\\\n\\\\nData exploration helps you explore and think about the data you're working. The goal with data exploration is to understand,  and visualize data so that you can discover insights, relationships, patterns, and anomalies.\\\\nTo explore data in R we have many functions to achieve that.\\\\n\\\\n+ Function head(): is used to view the first few rows of your dataset.\\\\n\\\\n```r\\\\nhead(data_1)\\\\n```\\\\n\\\\n\\\\n+ Function tail(): is used to view the last few rows of your dataset.\\\\n\\\\n```r\\\\ntail(data_1)\\\\n```\\\\n\\\\n\\\\n+ Function str(): is used to provide the structure of your data frame, showing you the data types.\\\\n\\\\n```r\\\\nstr(data_1)\\\\n```\\\\n\\\\n\\\\n+ Function dim(): is used to know about the number of rows and columns.\\\\n\\\\n```r\\\\ndim(data_1)\\\\n```\\\\n\\\\n\\\\n+ Function summary(): it gives you an overview of your data, including minimum and maximum values, quartiles, and more.\\\\n\\\\n```r\\\\nsummary(data_1)\\\\n```\\\\n\\\\n\\\\n+ Function table(): used to build a contingency table of the counts at each combination of factor levels.\\\\n\\\\n```r\\\\ntable(data_1$Sex)\\\\n#> \\\\n#> Female   Male \\\\n#>     58     49\\\\n```\\\\n\\\\n\\\\n+ Function unique(): The unique() function in R is used to eliminate or delete the duplicate values or the rows present in the vector, data frame, or matrix as well.\\\\n\\\\n```r\\\\nunique(data_1$`Do you  have children?`)\\\\n#> [1] \\\\\\\"NO\\\\\\\"  \\\\\\\"YES\\\\\\\"\\\\n```\\\\n\\\\n+ Function hist(): function to plot a basic histogram to view distribution of a variable.\\\\n\\\\n```r\\\\nhist(data_1$`How many children do you have?`)\\\\n```\\\\n\\\\n\\\\n\\\\n<img src=\\\\\\\"06-descriptive_statistics_files/figure-html/unnamed-chunk-41-1.png\\\\\\\" width=\\\\\\\"672\\\\\\\" />\\\\n\\\\n\\\\n+ Function boxplot(): function to plot a boxplot, it provides a compact summary of the data's central tendency, spread, and potential outliers.\\\\n\\\\n```r\\\\nboxplot(data_1$`How many children do you have?`)\\\\n```\\\\n\\\\n\\\\n\\\\n<img src=\\\\\\\"06-descriptive_statistics_files/figure-html/unnamed-chunk-42-1.png\\\\\\\" width=\\\\\\\"672\\\\\\\" />\\\\n\\\\n\\\\n## Data manipulation with dplyr\\\\n\\\\n**IMPORTANT POINT:**\\\\nOne of the more useful ways to use dplyr is with the pipe operator. The pipe operator looks like this: %>% ,and it is common practice to use the pipe operator to “pipe” dplyr commands together. It is a way to chain multiple operations together in a concise and precise way. The %>% operator takes the output of the expression on its left and passes it as the first argument to the function on its right.\\\\n\\\\nIn order to manipulate and clean the data, R provides a library called dplyr which consists of many built-in methods to manipulate the data. So to use the data manipulation function, first need to import the dplyr package using library(dplyr) line of code. Below is the list of fundamental data manipulation verbs that you will use to do most of your data manipulations.\\\\n\\\\n+ filter(): \\\\n\\\\n  The filter() function is used to produce the subset of the data that satisfies the condition specified in the filter() method. In the condition, we can use conditional operators, logical operators, NA values, range operators etc. to filter out data. Syntax of filter() function is given below:\\\\n\\\\n        filter(dataframeName,condition)\\\\n        \\\\nExample:\\\\n\\\\n```r\\\\ndplyr::filter(data_1, Sex==\\\\\\\"Female\\\\\\\")\\\\n```\\\\n\\\\n+ distinct(): \\\\n\\\\n  The distinct() method removes duplicate rows from data frame or based on the specified columns. The syntax of distinct() method is given below:\\\\n  \\\\n        distinct(dataframeName, col1, col2,.., .keep_all=TRUE)\\\\n        \\\\nExample:\\\\n\\\\n```r\\\\ndata_1 %>% \\\\n  dplyr::distinct()\\\\n```\\\\n\\\\n\\\\n+ arrange():\\\\n\\\\n  In R, the arrange() method is used to order the rows based on a specified column. The syntax of arrange() method is specified below:\\\\n  \\\\n        arrange(dataframeName, columnName)\\\\n        \\\\nExample:\\\\n\\\\n```r\\\\ndata_1 %>% \\\\n  dplyr::arrange(Sex)\\\\n```\\\\n\\\\n\\\\n+ select():\\\\n\\\\n  The select() method is used to extract the required columns as a table by specifying the required column names in select() method. The syntax of select() method is mentioned below:\\\\n        \\\\n        select(dataframeName, col1,col2,…)\\\\n        \\\\nExample:\\\\n\\\\n```r\\\\ndata_1 %>% \\\\n  dplyr::select(Sex,`Do you  have children?`)\\\\n```\\\\n\\\\n\\\\n+ rename():\\\\n\\\\n  The rename() function is used to change the column names. This can be done by the below syntax:\\\\n  \\\\n        rename(dataframeName, newName=oldName)\\\\n        \\\\nExample:\\\\n\\\\n```r\\\\ndata_1 %>%\\\\n  dplyr::rename(Status= `Are you married?`)\\\\n```\\\\n\\\\n\\\\n+ mutate():\\\\n\\\\n  The mutate() function creates new variables without dropping the old ones. The syntax of mutate() is specified below:\\\\n  \\\\n        mutate(dataframeName, newVariable=formula)\\\\n        \\\\nExample:\\\\n\\\\n```r\\\\ndata_1 %>%\\\\n  dplyr::mutate(sex=ifelse(Sex==\\\\\\\"Female\\\\\\\", \\\\\\\"F\\\\\\\", \\\\\\\"M\\\\\\\"))\\\\n```\\\\n\\\\n\\\\n+ transmute():\\\\n\\\\n  The transmute() function drops the old variables and creates new variables. Here is the syntax:\\\\n  \\\\n        transmute(dataframeName, newVariable=formula)\\\\n        \\\\nExample:\\\\n\\\\n```r\\\\ndata_1 %>%\\\\n  dplyr::transmute(sex=ifelse(Sex==\\\\\\\"Female\\\\\\\", \\\\\\\"F\\\\\\\", \\\\\\\"M\\\\\\\"))\\\\n```\\\\n\\\\n\\\\n+ summarize():\\\\n\\\\n  Using the summarize method we can summarize the data in the data frame by using aggregate functions like sum(), mean(), etc. Usually this function is used with the `group_by()` function. The syntax of summarize() method is specified below:\\\\n  \\\\n        summarize(dataframeName, aggregate_function(columnName))\\\\n        \\\\nExample:\\\\n\\\\n```r\\\\ndata_1 %>%\\\\n  group_by(Sex) %>%\\\\n  summarize(mean=mean(`How many children do you have?`), count=n())\\\\n#> # A tibble: 2 × 3\\\\n#>   Sex     mean count\\\\n#>   <chr>  <dbl> <int>\\\\n#> 1 Female  2.88    58\\\\n#> 2 Male    1.76    49\\\\n```\\\"\\n````\\n\\n```r\\nsource(\\\"./dependencies.R\\\")\\n```\\n\\n# Data cleaning\\n\\nIn the domain of data science, R reigns supreme as a tool for transforming raw data into actionable insights. \\nData cleaning, a core competency of R, empowers us to clean, filter, transform, and aggregate data, paving the way for meaningful analysis. This introductory paragraph delves into the world of data manipulation and data cleaning in R, highlighting its significance and exploring the key concepts involved.\\n\\nThere are several methods used for data cleansing, including:\\n\\n1) Renaming colums\\n\\nDuring data cleansing, column renaming plays a crucial role in organizing and clarifying the dataset. This step involves assigning meaningful and consistent names to columns, which facilitates their interpretation and subsequent use in analysis.\\n\\n```r\\ndata_1 %>%\\n  rename(marital_status=`Are you married?`)\\n```\\n\\n\\n2) Handling Missing Data: \\n\\nMissing data, also known as missing values, is a common challenge encountered in data analysis. It refers to the absence of information for specific variables in certain observations within your dataset. To deal with missing data we have two options: impute data or remove data.\\n\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.1) Imputation\\n\\nwe can use imputation by mean, median or mode.\\n\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- *Imputation by mean*:\\n\\n```r\\n#Create a new column of number of varieties\\ndata_1$number_variety <- str_sub(data_1$`How many varieties do you grow on the same plot or in the same field?`, 1, 1)\\n\\n#verify the type of the column\\nstr(data_1$number_variety)\\n\\n#transform the type into number\\ndata_1$number_variety <- as.integer(data_1$number_variety)\\n\\n#impute NA values by mean\\ndata_1$number_variety[is.na(data_1$number_variety)]<-round(mean(data_1$number_variety, na.rm = TRUE))\\n```\\n\\n\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- *Imputation by median*:\\n\\n```r\\n#function to extract the number of kg in the column\\ndata_1$`What is the production in kg or ton/year?` <- sapply(data_1$`What is the production in kg or ton/year?`, function(x) {\\n    # Extract digits using regular expression and convert to numeric\\n    str_extract(x, \\\"\\\\\\\\d+\\\") %>% as.numeric()\\n})\\n\\n#impute the column by median\\ndata_1$`What is the production in kg or ton/year?`[is.na(data_1$`What is the production in kg or ton/year?`)]<-median(data_1$`What is the production in kg or ton/year?`, na.rm = TRUE)\\n\\n```\\n\\n\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- *Imputation by mode*:\\n\\n```r\\ndata_1$`Where do you get your seeds?`[is.na(data_1$`Where do you get your seeds?`)] <- names(which.max(table(data_1$`Where do you get your seeds?`)))\\n```\\n\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.2) Removing data\\n\\nThere are 2 usuals methods for deleting data when dealing with missing data: listwise and dropping variables.\\n\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- *Listwise*:\\n\\nIn this method, all data for an observation that has one or more missing values are deleted. The analysis is run only on observations that have a complete set of data. \\n\\n```r\\n#remove all rows who does'nt have a tasba farm\\ndata_listwise <- data_1\\nna.omit(data_listwise)\\n```\\n\\n\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- *Dropping variables*:\\n\\nIf data is missing for a large proportion of the observations, it may be best to discard the variable entirely if it is insignificant.\\n\\n```r\\nsubset( data_1, select = -c(`How do you call these varieties you have?`))\\n```\\n\\n3) Handling outliers\\nData points far from the dataset’s other points are considered outliers. The presence of outliers can pose significant problems in statistical analysis and machine learning. They can bias model parameter estimates, lead to erroneous conclusions and affect algorithm performance.\\n\\n\\n```r\\n# data_1 <- data_1$`How many children do you have?`[!data_1$`How many children do you have?` %in% boxplot.stats(data_1$`How many children do you have?`)$out]\\n```\\n\\n\\n4) Removing duplicates: \\nRemoving duplicates ensures that each data point is represented only once, leading to more accurate and consistent data for analysis.\\n\\n```r\\ndata_1 <- data_1 %>% \\n  distinct()\\n```\\n\\n5) Checking data structure: \\n\\nChecking data types is a crucial step in data analysis because it ensures you're working with the data in the way it's intended in order to avoid errors later in the analysis.\\n\\n```r\\nstr(data_1)\\n```\\nYou can change the type of your data across many functions like: as.numeric(), as.character(), as.factor() etc....if the data is not in the right type.\\n\\n6) Combine dataframes\\n\\nSuppose the dataset combines data from different sources, we can combine differents datasets into one. When combining data from multiple sources, ensure that all data fields align correctly.\\n&nbsp;&nbsp;&nbsp;&nbsp;- Combine by column\\n00\\n\\n```r\\nculture1 <- data.frame(\\n  Culture = c(\\\"wheat\\\", \\\"maize\\\", \\\"rice\\\"),\\n  Area = c(100, 150, 120)\\n)\\n\\nculture2 <- data.frame(\\n  Culture = c(\\\"wheat\\\", \\\"maize\\\", \\\"rice\\\"),\\n  Return = c(50, 60, 45)\\n)\\n\\nculture_final1 <- cbind(culture1, culture2)\\n```\\n\\n&nbsp;&nbsp;&nbsp;&nbsp;- combine by row\\n\\n```r\\nculture3 <- data.frame(\\n  Culture = c(\\\"wheat\\\", \\\"maize\\\", \\\"rice\\\"),\\n  Area = c(100, 150, 120)\\n)\\n\\nculture4 <- data.frame(\\n  Culture = c(\\\"potato\\\", \\\"cassava\\\"),\\n  Area = c(250, 400)\\n)\\n\\nculture_final2 <- rbind(culture3, culture4)\\n```\\n\\n\\n\\n```r\\n\\n# 7) Data inconsistencies:\\n# \\n# When faced with a data set, we are often confronted with data inconsistencies. This can take the form of spelling errors, language heterogeneity in the dataset, etc.\\n# \\n# &nbsp;&nbsp;&nbsp;&nbsp;Handling spelling errors\\n\\n#&nbsp;&nbsp;&nbsp;&nbsp; Handling language heterogeneity\\n\\n```\\n\\n\\n\\n\\n\\n\"\nsource(\"./dependencies.R\")"},{"path":"descriptive-statistics.html","id":"descriptive-statistics","chapter":"7 Descriptive statistics","heading":"7 Descriptive statistics","text":"","code":""},{"path":"descriptive-statistics.html","id":"central-tendency-indicators","chapter":"7 Descriptive statistics","heading":"7.1 Central Tendency Indicators","text":"Central tendency indicators, also known measures central tendency, statistical measures used summarize set data finding single value represents middle center data. basically give idea data points tend cluster around.three main types central tendency indicators:Mean\ncommon one, also called average. ’s calculated adding values data set dividing number values.Median\nmiddle number arrange data set order, least greatest. even number data points, median average two middle numbers.Mode\nfrequent value data set. can multiple modes, way, couple values tie frequent.","code":"\nmean(data_1$`What is the production in kg or ton/year?`)\n#> [1] 138.3084\nmedian(data_1$`What is the production in kg or ton/year?`)\n#> [1] 8\nnames(which.max(table(data_1$`Are you married?`)))\n#> [1] \"YES\""},{"path":"descriptive-statistics.html","id":"variability-indicators","chapter":"7 Descriptive statistics","heading":"7.2 Variability indicators","text":"Variability indicators, contrast central tendency, tell spread data . describe much data points differ central value (mean, median, mode). common ways measure variability:Variance\naverage squared deviations data point mean. tells much data varies average, since uses squared values, can sensitive extreme values.Standard deviation\nsquare root variance. Standard deviation expressed units original data (e.g., meters, dollars), can easier interpret variance. also reflects much data deviates mean average.Range\nsimplest method. ’s just difference highest lowest values data set. easy calculate, range can misleading data outliers.Interquartile range (IQR)\nfocuses middle half data. represents range first quartile (Q1) third quartile (Q3). Half data falls within IQR, giving better idea spread bulk data .","code":"\nvar(data_1$`What is the production in kg or ton/year?`)\n#> [1] 296798.9\n#1st approch using the native function\nsd(data_1$`What is the production in kg or ton/year?`)\n#> [1] 544.7925\n\n#2nd approch\nsqrt(var(data_1$`What is the production in kg or ton/year?`))\n#> [1] 544.7925\nmax(data_1$`How many children do you have?`) - min(data_1$`How many children do you have?`)\n#> [1] 12\nIQR(data_1$`How many children do you have?`)\n#> [1] 4"},{"path":"descriptive-statistics.html","id":"quantiles","chapter":"7 Descriptive statistics","heading":"7.3 Quantiles","text":"Quantiles values split sorted data probability distribution equal parts. general terms, q-quantile divides sorted data q parts. commonly used quantiles special names:      Quartiles:      Deciles:      Percentiles:","code":"\nquantile(data_1$`How many children do you have?`)\n#>   0%  25%  50%  75% 100% \n#>    0    0    2    4   12\nquantile(data_1$`How many children do you have?`,probs = seq(0, 1, by = 0.1))\n#>   0%  10%  20%  30%  40%  50%  60%  70%  80%  90% 100% \n#>    0    0    0    0    0    2    2    3    5    6   12\nquantile(data_1$`How many children do you have?`,probs = seq(0, 1, by = 0.01))\n#>    0%    1%    2%    3%    4%    5%    6%    7%    8%    9% \n#>  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00 \n#>   10%   11%   12%   13%   14%   15%   16%   17%   18%   19% \n#>  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00 \n#>   20%   21%   22%   23%   24%   25%   26%   27%   28%   29% \n#>  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00 \n#>   30%   31%   32%   33%   34%   35%   36%   37%   38%   39% \n#>  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00  0.00 \n#>   40%   41%   42%   43%   44%   45%   46%   47%   48%   49% \n#>  0.00  0.46  1.00  1.00  1.00  1.00  1.00  1.00  1.88  2.00 \n#>   50%   51%   52%   53%   54%   55%   56%   57%   58%   59% \n#>  2.00  2.00  2.00  2.00  2.00  2.00  2.00  2.00  2.00  2.00 \n#>   60%   61%   62%   63%   64%   65%   66%   67%   68%   69% \n#>  2.00  2.00  2.00  2.00  2.00  2.90  3.00  3.00  3.00  3.00 \n#>   70%   71%   72%   73%   74%   75%   76%   77%   78%   79% \n#>  3.00  3.00  3.00  3.38  4.00  4.00  4.00  4.00  4.68  5.00 \n#>   80%   81%   82%   83%   84%   85%   86%   87%   88%   89% \n#>  5.00  5.00  5.00  5.00  5.00  5.00  5.00  5.00  5.28  6.00 \n#>   90%   91%   92%   93%   94%   95%   96%   97%   98%   99% \n#>  6.00  6.00  6.00  6.58  7.64  8.70  9.76 10.00 10.00 11.88 \n#>  100% \n#> 12.00"},{"path":"descriptive-statistics.html","id":"contingency-table","chapter":"7 Descriptive statistics","heading":"7.4 Contingency table","text":"contingency table displays frequencies combinations two categorical variables.","code":""},{"path":"inferential-statistics.html","id":"inferential-statistics","chapter":"8 Inferential statistics","heading":"8 Inferential statistics","text":"Inferential statistics branch statistics aims draw conclusions population sample population. Unlike descriptive statistics, simply describes summarizes characteristics sample, inferential statistics uses statistical methods models make inferences predictions wider population sample drawn.main techniques inferential statistics include hypothesis testing, parameter estimation, analysis variance (ANOVA), regression forecasting methods. fundamental concepts associated inferential statistics:","code":""},{"path":"inferential-statistics.html","id":"population-and-sample","chapter":"8 Inferential statistics","heading":"8.1 Population and sample","text":"statistics, population entire set items draw data statistical study. can group individuals, set items, etc. makes data pool study. Generally, population refers people live particular area specific time. statistics, population refers data study interest. can group individuals, objects, events, organizations, etc. use populations draw conclusions.sample defined smaller manageable representation larger group. subset larger population contains characteristics population. sample used statistical testing population size large members observations included test.\nsample unbiased subset population best represents whole data.characteristics samples populations described numbers called statistics parameters:statistic measure describes sample (e.g., sample mean).parameter measure describes whole population (e.g., population mean).two important types estimates can make population: point estimates interval estimates.point estimate single value estimate parameter. instance, sample mean point estimate population mean.\ninterval estimate gives range values parameter expected lie. confidence interval common type interval estimate.","code":""},{"path":"inferential-statistics.html","id":"parameter-estimations","chapter":"8 Inferential statistics","heading":"8.2 Parameter estimations","text":"Parameter estimation process calculating expected value population parameter based samples taken population.","code":""},{"path":"inferential-statistics.html","id":"confidence-interval","chapter":"8 Inferential statistics","heading":"8.3 Confidence interval","text":"confidence interval uses variability around statistic come interval estimate parameter. Confidence intervals useful estimating parameters take sampling error account.\nconfidence interval associated confidence level. confidence level tells probability (percentage) interval containing parameter estimate repeat study .\n95% confidence interval means repeat study new sample exactly way 100 times, can expect estimate lie within specified range values 95 times.","code":""},{"path":"inferential-statistics.html","id":"hypothesis","chapter":"8 Inferential statistics","heading":"8.4 Hypothesis","text":"Hypothesis testing fundamental concept inferential statistics involves making decisions drawing conclusions populations based sample data. hypothesis testing, start two competing hypotheses: null hypothesis (H0) alternative hypothesis (H1). hypotheses statements population parameter(s) interest.Null Hypothesis (H0):\nnull hypothesis represents status quo default assumption. suggests significant difference effect, relationship variables population.\nnull hypothesis typically states population parameter(s) equals specific value follows specific distribution.\ndenoted H0.\nnull hypothesis represents status quo default assumption. suggests significant difference effect, relationship variables population.null hypothesis typically states population parameter(s) equals specific value follows specific distribution.denoted H0.Alternative Hypothesis (H1):\nalternative hypothesis contradicts null hypothesis suggests significant difference, effect, relationship population.\nalternative hypothesis can take different forms depending research question nature hypothesis tested.\ndenoted H1.\nalternative hypothesis contradicts null hypothesis suggests significant difference, effect, relationship population.alternative hypothesis can take different forms depending research question nature hypothesis tested.denoted H1.process hypothesis testing involves following steps:Formulate Hypotheses: Clearly state null alternative hypotheses based research; question problem.Select Significance Level: Choose significance level (α), typically set 0.05 0.01, represents probability rejecting null hypothesis actually true.Collect Data Calculate Test Statistic:Collect sample data compute test statistic measures strength evidence null hypothesis.Determine Critical Region: Determine critical region rejection region, consists values test statistic lead rejection null hypothesis.Make Decision: Compare calculated test statistic critical value(s) use p-values decide whether reject null hypothesis. test statistic falls critical region p-value less significance level, reject null hypothesis favor alternative hypothesis. Otherwise, fail reject null hypothesis.Interpret Results: Interpret results hypothesis test context research question. Draw conclusions population based sample data outcome hypothesis test.","code":""},{"path":"inferential-statistics.html","id":"statistical-tests","chapter":"8 Inferential statistics","heading":"8.5 Statistical tests","text":"various types statistical tests, designed address different research questions hypotheses. commonly used statistical tests include:T test Student testT test Student testANOVAANOVAChi-Square testChi-Square testPearson Correlation CoefficientPearson Correlation CoefficientFischer testFischer test","code":""},{"path":"visualization.html","id":"visualization","chapter":"9 Visualization","heading":"9 Visualization","text":"","code":""},{"path":"visualization.html","id":"bar-chart","chapter":"9 Visualization","heading":"9.1 Bar chart","text":"bar chart representation numerical data pictorial form rectangles (bars) uniform width varying heights.” also known bar graphs.","code":"\n#construction of the dataframe\ndata_barchart <- as.data.frame(table(data_1$`What is your religion?`))\ndata_barchart <- data_barchart %>%\n    dplyr::mutate(percentage = round(100*(Freq/sum(Freq)),2),\n                  pct1 = paste0(percentage, \"%\")) %>%\n  rename(Religion=Var1)\n\n\n#plot the bar chart\nplotly::plot_ly(data_barchart, x = ~Religion,\n                  type = \"bar\",\n                  y = ~percentage,\n                  marker = list(color = \"#318CE7\"),\n                  text = paste(data_barchart$pct1, sep = \"\"), textposition = 'outside') %>%\n    layout(title = \"Number of persons by religion\"\n    )"},{"path":"visualization.html","id":"pie-chart","chapter":"9 Visualization","heading":"9.2 Pie chart","text":"pie chart type graph representing data circular form, slice circle representing fraction proportionate part whole.","code":"\n#construction of the dataframe\ndata_piechart <- as.data.frame(table(data_1$Sex))\ndata_piechart <- data_piechart %>%\n    dplyr::mutate(percentage = round(100*(Freq/sum(Freq)),2),\n                  pct1 = paste0(percentage, \"%\"))\n\n#plot the pie chart\nplotly::plot_ly(data_piechart, labels= ~Var1,\n          values= ~Freq, type=\"pie\",\n          hoverinfo = 'text',\n          textinfo = 'label+percent',\n          insidetextfont = list(color = '#FFFFFF'),\n          text = ~paste(\"Sex :\",Var1,\n                        \"<br>Number of persons :\", Freq,\n                        \"<br>Percentage :\", pct1),\n          marker = list(colors = c(\"#318CE7\", \"#89CFF0\"),\n                        line = list(color = '#FFFFFF', width = 1),showlegend = FALSE)) %>%\n    layout(title=\"\",\n           xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\n           yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))"},{"path":"visualization.html","id":"histogram","chapter":"9 Visualization","heading":"9.3 Histogram","text":"histogram chart plots distribution numeric variable’s values series bars. bar typically covers range numeric values called bin class; bar’s height indicates frequency data points value within corresponding bin.","code":"\nlibrary(ggplot2)\n\n# Change colors\np<-ggplot(data_1, aes(x=`How many children do you have?`)) + \n  geom_histogram(color=\"black\", fill=\"white\")\np\n#> `stat_bin()` using `bins = 30`. Pick better value with\n#> `binwidth`."},{"path":"visualization.html","id":"scatter-plot","chapter":"9 Visualization","heading":"9.4 Scatter plot","text":"","code":""},{"path":"visualization.html","id":"line-chart","chapter":"9 Visualization","heading":"9.5 Line chart","text":"","code":""},{"path":"visualization.html","id":"map-visualization","chapter":"9 Visualization","heading":"9.6 Map visualization","text":"","code":""},{"path":"visualization.html","id":"wordcloud","chapter":"9 Visualization","heading":"9.7 Wordcloud","text":"","code":""}]
