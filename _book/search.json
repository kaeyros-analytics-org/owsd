[{"path":"index.html","id":"welcome-adress","chapter":"1 Welcome adress","heading":"1 Welcome adress","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed eiusmod tempor incididunt ut labore et dolore magna aliqua. Interdum velit laoreet id donec. Tincidunt praesent semper feugiat nibh sed pulvinar proin gravida. Condimentum lacinia quis vel eros donec ac. Egestas erat imperdiet sed euismod nisi porta lorem. Montes nascetur ridiculus mus mauris vitae ultricies. Hendrerit dolor magna eget est lorem ipsum. Dictum fusce ut placerat orci nulla. Integer eget aliquet nibh praesent tristique magna sit amet purus. Aliquam purus sit amet luctus venenatis lectus magna fringilla. Pulvinar mattis nunc sed blandit libero volutpat sed cras. elementum eu facilisis sed odio morbi quis. egestas erat imperdiet sed euismod nisi porta lorem. Ac placerat vestibulum lectus mauris ultrices eros. Placerat egestas erat imperdiet. Curabitur gravida arcu ac tortor dignissim. Libero enim sed faucibus turpis eu mi bibendum. Vulputate dignissim suspendisse est ante nibh.quis risus sed vulputate odio ut enim blandit. Quis blandit turpis cursus hac habitasse platea. Et tortor consequat id porta nibh venenatis cras sed. Aliquet bibendum enim facilisis gravida. Proin nibh nisl condimentum id venenatis condimentum. Vivamus augue eget arcu dictum varius duis. Ut eu sem integer vitae justo eget magna. Tristique magna sit amet purus gravida quis blandit turpis cursus. Enim lobortis scelerisque fermentum dui faucibus ornare. Adipiscing enim eu turpis egestas pretium aenean.Diam arcu cursus euismod. Mauris augue neque gravida fermentum. Amet cursus sit amet dictum sit amet. Velit euismod pellentesque massa placerat duis ultricies. Natoque penatibus et magnis dis parturient montes nascetur ridiculus mus. Enim eu turpis egestas pretium. Vulputate enim nulla aliquet porttitor lacus luctus accumsan. Tortor id aliquet lectus proin nibh nisl. Ac felis donec et odio pellentesque diam volutpat commodo sed. Ut diam quam nulla porttitor massa id. Quam quisque id diam vel quam elementum pulvinar etiam. Fames ac turpis egestas maecenas pharetra. Vulputate odio ut enim blandit volutpat maecenas volutpat. Consequat mauris nunc congue nisi. Pellentesque adipiscing commodo elit . Tortor vitae purus faucibus ornare. Semper eget duis tellus urna. Ornare quam viverra orci sagittis eu volutpat odio. Elementum facilisis leo vel fringilla est ullamcorper eget nulla.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"introduction-to-r-and-rstudio","chapter":"2 Introduction to R and RStudio","heading":"2 Introduction to R and RStudio","text":"R widely used programming language data analysis data science. open-source free nature makes accessible everyone, active community offers invaluable support users.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"presentation","chapter":"2 Introduction to R and RStudio","heading":"2.1 Presentation","text":"R popular programming language free open source software data analysis science. particularly powerful performing complex statistical calculations creating attractive graphics. R offers around 20,000 packages compatible variety operating systems.RStudio integrated development environment (IDE) specifically designed work R programming language. makes working R easier enjoyable.RStudio’s key features numerous, just :User-friendly interface: RStudio intuitive interface code editor, console, environment panel plot panel. makes easy navigate visualise work.Code editing features: RStudio offers code editing features code completion, syntax highlighting debugging, allowing write R code faster easier.Package management: RStudio makes easy install manage many packages available R extend functionality specific tasks.Data visualization: RStudio makes easy create graphs visualizations data, helping explore trends communicate results.ability create projects organise share work colleagues effectively.History environment: RStudio keeps history orders variables, can keep track work easily re-use previous elements.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"when-was-r-created","chapter":"2 Introduction to R and RStudio","heading":"When was R created?","text":"R created early 1990s University Auckland statisticians Ross Ihaka Robert Gentleman.\nIhaka Gentleman, statistics professors New Zealand university, saw Ihaka called “common need better software environment” computer science laboratories. realization prompted pair begin developing R, implementation earlier S programming language.\nAlthough professors started working R early 90s, version 1.0.0 wasn’t officially released February 2000.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"why-the-name-r","chapter":"2 Introduction to R and RStudio","heading":"Why the name R ?","text":"R language takes name two sources: firstly, first letter name creators, secondly, play words name predecessor, S language, originally designed Bell Telephone Laboratories.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"strengths-of-r","chapter":"2 Introduction to R and RStudio","heading":"Strengths of R","text":"free software: advantage free encouraging reproducible research;interpreted language: language closer language machine language, simpler direct , example, C C++;easier code sharing re-use thanks package system CRAN;active community developers users:\nR evolves quickly, bugs quickly identified corrected;\nlot information programming R Internet;\nnumber R packages always growing, new features frequently added R.\nR evolves quickly, bugs quickly identified corrected;lot information programming R Internet;number R packages always growing, new features frequently added R.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"weaknesses-of-r","chapter":"2 Introduction to R and RStudio","heading":"Weaknesses of r","text":"","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"installation-of-r","chapter":"2 Introduction to R and RStudio","heading":"2.2 Installation of R","text":"install Windows, go http://cran.r-project.org/bin/windows/base/ follow first link \ndownload installer. installer launched, simply install R default options.","code":""},{"path":"introduction-to-r-and-rstudio.html","id":"installation-of-rstudio","chapter":"2 Introduction to R and RStudio","heading":"2.3 Installation of RStudio","text":"R correctly installed, go http://www.rstudio.com/products/rstudio/download/ download latest stable version RStudio. Specifically, Open Source edition RStudio Desktop (also server version).\nChoose installer operating system follow instructions installation program.\nwant try latest RStudio features, can download development version (feature-rich stable version, may contain bugs) \nhttp://www.rstudio.com/products/rstudio/download/preview/.","code":""},{"path":"basics-of-the-r-language.html","id":"basics-of-the-r-language","chapter":"3 Basics of the R language","heading":"3 Basics of the R language","text":"","code":""},{"path":"basics-of-the-r-language.html","id":"variables","chapter":"3 Basics of the R language","heading":"3.1 Variables","text":"Variables identifier named space memory, stored can referenced manipulated later program.","code":""},{"path":"basics-of-the-r-language.html","id":"rule-variable-in-r","chapter":"3 Basics of the R language","heading":"Rule variable in R","text":"recommended use nouns name variable. Use underscores (e.g. donnees_menages) rather CamelCase (e.g. donneesMenages). prefer camelCase, use systematically throughout script standardise code.Notes:use T F name variables (abbreviations Booleans TRUE FALSE);use names already basic R functions(mean example). doesn’t always generate errors, prevent errors difficult detect!variable name must start letter can contain number,letter,underscore(’_‘) period(’.’).Special characters ‘#’, ‘&’, etc., along White space (tabs, space) allowed variable name.Underscore(’_’) beginning variable name allowed","code":""},{"path":"basics-of-the-r-language.html","id":"variable-assignment","chapter":"3 Basics of the R language","heading":"Variable assignment","text":"Variables R can assigned one three ways.Assignment Operator: “=” used assign value.following example contains 20 value stored variable ‘first.variable’ Example: first.variable = 20Assignment Operator: “=” used assign value.following example contains 20 value stored variable ‘first.variable’ Example: first.variable = 20‘<-’ Operator: following example contains New Program character gets assigned ‘second_variable’.\nExample: second_variable <- “New Program”‘<-’ Operator: following example contains New Program character gets assigned ‘second_variable’.\nExample: second_variable <- “New Program”‘->’ Operator: following example contains 565 integer gets assigned ‘third.variable’.\nExample: 565 -> third.variable‘->’ Operator: following example contains 565 integer gets assigned ‘third.variable’.\nExample: 565 -> third.variable","code":""},{"path":"basics-of-the-r-language.html","id":"types","chapter":"3 Basics of the R language","heading":"3.2 Types","text":"programming, data type important concept. Variables can store data different types, different types can different things.R, variables need declared particular type, can even change type set:several types variable R, common :integer: whole numbersnumeric: decimalscharacter: textlogical: booleans (TRUE FALSE)factor : categoriesIn addition variable types R, also data types, including:vectors: vector simply list items type.list: Lists R objects contain elements different types like − numbers, strings, vectors another list inside . list can also contain matrix function elements. List created using list() function.matrix : matrix two dimensional data structure variables typedataframe : dataframe two dimensional data structure variables differents types.","code":"\nval <- 3 #val is type of numeric\nval <- \"Hello\" #val is now a type of character\nclass(1L)\n#> [1] \"integer\"\nclass(1)\n#> [1] \"numeric\"\nclass(\"This is an R course\")\n#> [1] \"character\"\nclass(TRUE)\n#> [1] \"logical\"\nfactor.1 <- as.factor(c(\"green\",\"blue\",\"red\"))\nclass(factor.1)\n#> [1] \"factor\"\nvector_1 <- c(1,8)\nprint(vector_1)\n#> [1] 1 8\nvector_2 <- c(1,\"diamond\") #1 will become a character because all the elements \n                           #in the vector are supposed to have the same type\nprint(vector_2)\n#> [1] \"1\"       \"diamond\"\n# Create a list containing strings, numbers, vectors and a logical values.\nlist_data <- list(\"Red\", c(21,32,11), TRUE)\nprint(list_data)\n#> [[1]]\n#> [1] \"Red\"\n#> \n#> [[2]]\n#> [1] 21 32 11\n#> \n#> [[3]]\n#> [1] TRUE\nmatrix(1:9, nrow = 3, ncol = 3)\n#>      [,1] [,2] [,3]\n#> [1,]    1    4    7\n#> [2,]    2    5    8\n#> [3,]    3    6    9\ndata <- data.frame(id = c(1, 2), Age = c(21, 15), Name = c(\"John\", \"Dora\"))\nprint(data)\n#>   id Age Name\n#> 1  1  21 John\n#> 2  2  15 Dora"},{"path":"basics-of-the-r-language.html","id":"operators","chapter":"3 Basics of the R language","heading":"3.3 Operators","text":"Operators R can mainly classified following categories: arithmetic Operators,relational Operators, logical Operators,assignment OperatorsR arithmetics operators:\naddition (+)\nR arithmetics operators:addition (+)subtraction(-)multiplication (*)division (/)exponent (^)modulus (%%)integer division(%/%)relational operators:\nless (<)\nrelational operators:less (<)greater (>)less equal (<=)greater equal (>=)equal (==)equal (!=)logical operators:\nlogical (!)\nlogical operators:logical (!)Logical (&)Logical (|)assignment operators:\nLeftwards assignment (<-,<<-)\nassignment operators:Leftwards assignment (<-,<<-)Rightwards assignment (->, ->>)","code":"\nprint(5+2)\n#> [1] 7\nprint(1-9)\n#> [1] -8\nprint(6*500)\n#> [1] 3000\nprint(5/2)\n#> [1] 2.5\nprint(2^3)\n#> [1] 8\nprint(9%%2)\n#> [1] 1\nprint(9%/%2)\n#> [1] 4\nprint(5<10)\n#> [1] TRUE\nprint(2>8)\n#> [1] FALSE\nprint(5<=5)\n#> [1] TRUE\nprint(5>=4)\n#> [1] TRUE\nx <- 7\nprint(x == 7)\n#> [1] TRUE\ny = 6\nprint(y!=4)\n#> [1] TRUE\nx <- c(TRUE, FALSE, 0, 6)\ny <- c(FALSE, TRUE, FALSE, TRUE)\n!x\n#> [1] FALSE  TRUE  TRUE FALSE\nx & y\n#> [1] FALSE FALSE FALSE  TRUE\nx | y\n#> [1]  TRUE  TRUE FALSE  TRUE\nx <- 5\nx <<- 6\n5 -> x\n6 ->>x"},{"path":"functions-and-packages.html","id":"functions-and-packages","chapter":"4 Functions and packages","heading":"4 Functions and packages","text":"embark R programming journey, understanding utilizing functions packages instrumental success. powerful tools empower tackle complex data analysis tasks, create insightful visualizations, develop innovative applications. Embrace world functions packages, unlock boundless possibilities R.","code":""},{"path":"functions-and-packages.html","id":"r-flow-control","chapter":"4 Functions and packages","heading":"4.1 R flow control","text":"run code, R executes statements order appear page, top bottom. Programming languages like R let change order code executes, allows skip certain statements run certain statements . Programming constructs let alter order code executes known control flow statements. R programming, many types control statements popular : condition, -else condition, loop, loop.condition: control structure checks expression provided parenthesis true . true, execution statements braces {} continues.\nSyntax:\n  (expression){\n    statements\n    ....\n  }condition: control structure checks expression provided parenthesis true . true, execution statements braces {} continues.\nSyntax:Example:-else condition:similar condition test expression condition fails, statements else condition executed.\nSyntax:\n  (expression) {\n    statements\n    ....\n  } else {\n    statements\n    ....\n  }-else condition:similar condition test expression condition fails, statements else condition executed.\nSyntax:Example:loop: type loop sequence statements executed repeatedly exit condition reached.\nSyntax:\n(value vector) {\nstatements\n….\n}\nExample:loop: loop another kind loop iterated condition satisfied. testing expression checked first executing body loop.\nSyntax:\n(expression) {\nstatement\n….\n}\nExample:","code":"  if(expression){\n    statements\n    ....\n  }\nx <- 100\n\nif(x > 10){ \n  print(paste(x, \"is greater than 10\"))\n}\n#> [1] \"100 is greater than 10\"  if (expression) {\n    statements\n    ....\n  } else {\n    statements\n    ....\n  }\nx <- 5\n\n# Check value is less than or greater than 10 \nif(x > 10){ \n  print(paste(x, \"is greater than 10\")) \n}else{ \n  print(paste(x, \"is less than 10\")) \n}\n#> [1] \"5 is less than 10\"\nx <- letters[3:5] \n\nfor(i in x){ \n  print(i) \n}\n#> [1] \"c\"\n#> [1] \"d\"\n#> [1] \"e\"\nx = 3\n\n# Print 1 to 5 \nwhile(x <= 5){ \n  print(x) \n  x = x + 1\n}\n#> [1] 3\n#> [1] 4\n#> [1] 5"},{"path":"functions-and-packages.html","id":"functions","chapter":"4 Functions and packages","heading":"4.2 Functions","text":"function set statements organized together perform specific task. useful want perform certain task multiple times.R function created using keyword function. basic syntax R function definition follows:Example1 : Single Input Single OutputExample 2: Multiple Input Multiple OutputExample 3: Inline FunctionExample 4: Function without Argument","code":"    function_name <- function(arg_1, arg_2,..) \n                        function body\n    }\n    \n# A simple R function to calculate \n# area of a circle\n \nareaOfCircle = function(radius){\n  area = pi*radius^2\n  return(area)\n}\n \nprint(areaOfCircle(2))\n#> [1] 12.56637\n\n# A simple R function to calculate area and perimeter of a rectangle\n \nRectangle = function(length, width){\n  area = length * width\n  perimeter = 2 * (length + width)\n   \n  # create an object called result which is a list of area and perimeter\n  result = list(\"Area\" = area, \"Perimeter\" = perimeter)\n  return(result)\n}\n \nresultList = Rectangle(2, 3)\nprint(resultList[\"Area\"])\n#> $Area\n#> [1] 6\nprint(resultList[\"Perimeter\"])\n#> $Perimeter\n#> [1] 10\n# A simple R program to demonstrate the inline function\n\nf = function(x) x^2*4+x/3\n\nprint(f(4))\n#> [1] 65.33333\nprint(f(-2))\n#> [1] 15.33333\nprint(0)\n#> [1] 0\n# Generate a random number between 0 and 1\ngenerate_random_number <- function() {\n  \n  random_number <- runif(1)\n  \n  return(random_number)\n}"},{"path":"functions-and-packages.html","id":"function-components","chapter":"4 Functions and packages","heading":"Function Components","text":"different parts function :Function Name: actual name function. stored R environment object name.Function Name: actual name function. stored R environment object name.Arguments: argument placeholder. function invoked, pass value argument. Arguments optional; , function may contain arguments. Also arguments can default values.Arguments: argument placeholder. function invoked, pass value argument. Arguments optional; , function may contain arguments. Also arguments can default values.Function Body: function body contains collection statements defines function .Function Body: function body contains collection statements defines function .Return Value: return value function last expression function body evaluated.Return Value: return value function last expression function body evaluated.R many -built functions can directly called program without defining first. can also create use functions referred user defined functions.","code":""},{"path":"functions-and-packages.html","id":"built-in-function","chapter":"4 Functions and packages","heading":"Built-in Function","text":"","code":""},{"path":"functions-and-packages.html","id":"packages","chapter":"4 Functions and packages","heading":"4.3 Packages","text":"","code":""},{"path":"footnotes-and-citations.html","id":"footnotes-and-citations","chapter":"5 Footnotes and citations","heading":"5 Footnotes and citations","text":"","code":""},{"path":"footnotes-and-citations.html","id":"footnotes","chapter":"5 Footnotes and citations","heading":"5.1 Footnotes","text":"Footnotes put inside square brackets caret ^[]. Like one 1.","code":""},{"path":"footnotes-and-citations.html","id":"citations","chapter":"5 Footnotes and citations","heading":"5.2 Citations","text":"Reference items bibliography file(s) using @key.example, using bookdown package2 (check last code chunk index.Rmd see citation key added) sample book, built top R Markdown knitr3 (citation added manually external file book.bib).\nNote .bib files need listed index.Rmd YAML bibliography key.bs4_book theme makes footnotes appear inline click . example book, added csl: chicago-fullnote-bibliography.csl index.Rmd YAML, include .csl file. download new style, recommend: https://www.zotero.org/styles/RStudio Visual Markdown Editor can also make easier insert citations: https://rstudio.github.io/visual-markdown-editing/#/citations","code":""},{"path":"blocks.html","id":"blocks","chapter":"6 Blocks","heading":"6 Blocks","text":"","code":""},{"path":"blocks.html","id":"equations","chapter":"6 Blocks","heading":"6.1 Equations","text":"equation.\\[\\begin{equation}\n  f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k}\n  \\tag{6.1}\n\\end{equation}\\]may refer using \\@ref(eq:binom), like see Equation (6.1).","code":""},{"path":"blocks.html","id":"theorems-and-proofs","chapter":"6 Blocks","heading":"6.2 Theorems and proofs","text":"Labeled theorems can referenced text using \\@ref(thm:tri), example, check smart theorem 6.1.Theorem 6.1  right triangle, \\(c\\) denotes length hypotenuse\n\\(\\) \\(b\\) denote lengths two sides, \n\\[^2 + b^2 = c^2\\]Read https://bookdown.org/yihui/bookdown/markdown-extensions--bookdown.html.","code":""},{"path":"blocks.html","id":"callout-blocks","chapter":"6 Blocks","heading":"6.3 Callout blocks","text":"bs4_book theme also includes special callout blocks, like .rmdnote.can use markdown inside block.user define appearance blocks LaTeX output.may also use: .rmdcaution, .rmdimportant, .rmdtip, .rmdwarning block name.R Markdown Cookbook provides help use custom blocks design callouts: https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html","code":"\nhead(beaver1, n = 5)\n#>   day time  temp activ\n#> 1 346  840 36.33     0\n#> 2 346  850 36.34     0\n#> 3 346  900 36.35     0\n#> 4 346  910 36.42     0\n#> 5 346  920 36.55     0"},{"path":"sharing-your-book.html","id":"sharing-your-book","chapter":"7 Sharing your book","heading":"7 Sharing your book","text":"","code":""},{"path":"sharing-your-book.html","id":"publishing","chapter":"7 Sharing your book","heading":"7.1 Publishing","text":"HTML books can published online, see: https://bookdown.org/yihui/bookdown/publishing.html","code":""},{"path":"sharing-your-book.html","id":"pages","chapter":"7 Sharing your book","heading":"7.2 404 pages","text":"default, users directed 404 page try access webpage found. ’d like customize 404 page instead using default, may add either _404.Rmd _404.md file project root use code /Markdown syntax.","code":""},{"path":"sharing-your-book.html","id":"metadata-for-sharing","chapter":"7 Sharing your book","heading":"7.3 Metadata for sharing","text":"Bookdown HTML books provide HTML metadata social sharing platforms like Twitter, Facebook, LinkedIn, using information provide index.Rmd YAML. setup, set url book path cover-image file. book’s title description also used.bs4_book provides enhanced metadata social sharing, chapter shared unique description, auto-generated based content.Specify book’s source repository GitHub repo _output.yml file, allows users view chapter’s source file suggest edit. Read features output format :https://pkgs.rstudio.com/bookdown/reference/bs4_book.htmlOr use:","code":"\n?bookdown::bs4_book"},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
